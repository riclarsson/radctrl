name: Build

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-doc,
          ubuntu-gcc-7,
          ubuntu-gcc-8,
          ubuntu-gcc-9,
          ubuntu-clang-9-nofortran,
          macos-gcc-9,
        ]

        include:
          - name: ubuntu-doc
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            doc: "yes"
            arts: "no"
            fortran: "no"
            check: "no"

          - name: ubuntu-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: "7"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            check: "yes"

          - name: ubuntu-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            check: "yes"

          - name: ubuntu-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            check: "yes"

          - name: ubuntu-clang-9-nofortran
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            doc: "no"
            arts: "yes"
            fortran: "no"
            check: "yes"

          - name: macos-gcc-9
            os: macos-latest
            compiler: gcc
            version: "9"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            check: "yes"

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Setup (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
             sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi

          sudo apt-get update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          fi

          if [ "${{ matrix.fortran }}" = "yes" ]; then
            sudo apt-get install -y gfortran-${{ matrix.version }}
            echo "::set-env name=FC::gfortran-${{ matrix.version }}"
            echo "::set-env name=USEFORTRAN::1"
          else
            echo "::set-env name=USEFORTRAN::0"
          fi

          if [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang++-${{ matrix.version }}
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi

          if [ "${{ matrix.doc }}" = "yes" ]; then
            sudo apt-get install -y texlive
          fi

          sudo apt-get install -y python3-minimal python3-pip python3-setuptools zlib1g-dev libopenblas-dev libfftw3-dev
          sudo pip3 install docutils lark-parser matplotlib netCDF4 numpy pytest scipy

      - name: Setup (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake python3
          sudo pip3 install docutils lark-parser matplotlib netCDF4 numpy pytest scipy
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
            if [ "${{ matrix.fortran }}" = "yes" ]; then
              echo "::set-env name=FC::gfortran-${{ matrix.version }}"
              echo "::set-env name=USEFORTRAN::1"
            else
              echo "::set-env name=USEFORTRAN::0"
            fi
          else
            exit 1
          fi

      - name: Configure (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mkdir cmake-build
          cd cmake-build
          cmake -DENABLE_FORTRAN=$USEFORTRAN ..

      - name: Build (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.arts == 'yes'
        run: |
          cd cmake-build
          make -j2 -C 3rdparty
          make -j2 -C src

      - name: Docs (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.doc == 'yes'
        run: |
          cd cmake-build
          make -j2 -C doc/uguide

      - name: Check (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.check == 'yes'
        run: |
          cd cmake-build
          make check

      - name: Check Python (Linux)
        if: runner.os == 'Linux' && matrix.check == 'yes'
        run: |
          cd cmake-build
          make check-python

