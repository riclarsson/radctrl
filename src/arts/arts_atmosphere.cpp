#include "arts_atmosphere.h"

#include <array>

namespace ARTS::Atmosphere::Earth {
Workspace& fascod_midlatitude_winter(Workspace& ws) {
  constexpr std::size_t N = 46;
  const std::size_t nlat =
      Var::lat_grid(ws).value().nelem() ? Var::lat_grid(ws).value().nelem() : 1;
  const std::size_t nlon =
      Var::lon_grid(ws).value().nelem() ? Var::lon_grid(ws).value().nelem() : 1;
  const std::size_t nspe = Var::abs_species(ws).value().nelem();

  Var::p_grid(ws) = {
      110000.0, 101800.0, 89730.0, 78970.0, 69380.0, 60810.0, 53130.0, 46270.0,
      40160.0,  34730.0,  29930.0, 25680.0, 21990.0, 18820.0, 16110.0, 13780.0,
      11780.0,  10070.0,  8610.0,  7360.0,  6280.0,  5370.0,  4580.0,  3910.0,
      3340.0,   2860.0,   2440.0,  1646.0,  1110.0,  756.0,   518.0,   360.0,
      253.0,    180.0,    129.0,   94.0,    68.3,    36.2,    18.8,    9.5,
      4.7,      2.22,     1.03,    0.456,   0.198,   0.088};

  Var::t_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::z_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::vmr_field(ws) = Tensor4(nspe, N, nlat, nlon, 0.0);

  constexpr std::array<double, N> OH = {
      4.404333e-14, 4.404333e-14, 4.403307e-14, 4.402564e-14, 4.404383e-14,
      4.404209e-14, 4.402789e-14, 4.402484e-14, 4.41458e-14,  4.451818e-14,
      4.563475e-14, 4.683576e-14, 4.803304e-14, 4.943337e-14, 5.193192e-14,
      5.65384e-14,  6.753845e-14, 8.256905e-14, 1.040442e-13, 1.300926e-13,
      1.641293e-13, 2.161776e-13, 3.403333e-13, 5.094468e-13, 7.596301e-13,
      1.160456e-12, 2.182176e-12, 5.003603e-12, 1.170911e-11, 3.402112e-11,
      8.352502e-11, 1.701644e-10, 2.852192e-10, 4.063014e-10, 5.112957e-10,
      5.794075e-10, 6.756952e-10, 9.538952e-10, 1.761237e-09, 3.742745e-09,
      7.197366e-09, 1.120861e-08, 1.130769e-08, 6.104093e-09, 1.5108e-09,
      2.413877e-10};
  constexpr std::array<double, N> H2O2 = {
      2.001701e-10, 2.001701e-10, 1.951099e-10, 1.920992e-10, 1.892057e-10,
      1.84157e-10,  1.770849e-10, 1.66093e-10,  1.491412e-10, 1.230629e-10,
      9.096755e-11, 5.793932e-11, 3.432504e-11, 1.951022e-11, 1.080715e-11,
      6.593966e-12, 4.203015e-12, 2.942061e-12, 2.301384e-12, 2.24172e-12,
      2.68171e-12,  3.683374e-12, 5.625944e-12, 1.031204e-11, 1.971355e-11,
      3.702655e-11, 6.204345e-11, 1.030728e-10, 1.361015e-10, 1.360925e-10,
      1.130473e-10, 8.516347e-11, 6.37463e-11,  5.173032e-11, 4.443403e-11,
      3.802751e-11, 3.48214e-11,  3.622953e-11, 5.253135e-11, 1.260769e-10,
      3.773534e-10, 1.120861e-09, 2.001305e-09, 1.681197e-09, 4.313987e-10,
      4.967633e-11};
  constexpr std::array<double, N> PH3 = {
      1.00085e-20,  1.00085e-20,  1.000564e-20, 1.000604e-20, 1.000972e-20,
      1.000904e-20, 1.000604e-20, 1.000631e-20, 1.001085e-20, 1.000346e-20,
      1.000778e-20, 1.000738e-20, 1.000711e-20, 1.000701e-20, 1.000676e-20,
      1.000765e-20, 1.00073e-20,  1.000693e-20, 1.000572e-20, 1.000681e-20,
      1.000673e-20, 1.000935e-20, 1.001018e-20, 1.000808e-20, 1.000801e-20,
      1.000777e-20, 1.000732e-20, 1.000721e-20, 1.000818e-20, 1.000669e-20,
      1.000478e-20, 1.000754e-20, 1.000723e-20, 1.000748e-20, 1.000734e-20,
      1.000724e-20, 1.000652e-20, 1.000909e-20, 1.000711e-20, 1.000633e-20,
      1.00099e-20,  1.000784e-20, 1.000653e-20, 1.000611e-20, 1.0008e-20,
      9.974484e-21};
  constexpr std::array<double, N> HCl = {
      1.00085e-09,  1.00085e-09,  7.495958e-10, 5.615066e-10, 4.224187e-10,
      3.193138e-10, 2.391198e-10, 1.7911e-10,   1.321432e-10, 9.966619e-11,
      7.486056e-11, 5.684078e-11, 4.59273e-11,  4.362523e-11, 6.515333e-11,
      1.010798e-10, 1.631309e-10, 2.371595e-10, 3.131727e-10, 3.852603e-10,
      4.422834e-10, 4.894567e-10, 5.225017e-10, 5.494183e-10, 5.754827e-10,
      6.044345e-10, 6.514867e-10, 7.516251e-10, 9.889193e-10, 1.280824e-09,
      1.570878e-09, 1.691708e-09, 1.74131e-09,  1.761409e-09, 1.791195e-09,
      1.801303e-09, 1.800959e-09, 1.802034e-09, 1.801206e-09, 1.800999e-09,
      1.802052e-09, 1.801164e-09, 1.801062e-09, 1.80098e-09,  1.801552e-09,
      1.795538e-09};
  constexpr std::array<double, N> HBr = {
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          7.143677e-12, 7.15645e-12,  7.15583e-12,  7.152879e-12,
      7.156703e-12, 7.15531e-12,  7.153554e-12, 7.156731e-12, 7.156126e-12,
      7.131168e-12};
  constexpr std::array<double, N> HNO3 = {
      5.006098e-11, 5.006098e-11, 5.962036e-11, 6.931894e-11, 7.91612e-11,
      8.876925e-11, 9.752973e-11, 1.110438e-10, 1.261775e-10, 1.390905e-10,
      1.53157e-10,  1.741133e-10, 2.021792e-10, 2.411501e-10, 2.762097e-10,
      3.332974e-10, 4.523778e-10, 7.374465e-10, 1.310867e-09, 2.111425e-09,
      3.172347e-09, 4.204038e-09, 4.944758e-09, 5.464546e-09, 5.745041e-09,
      5.844876e-09, 5.613745e-09, 4.822837e-09, 3.742588e-09, 2.591836e-09,
      1.640735e-09, 9.691421e-10, 5.334091e-10, 2.522069e-10, 1.211007e-10,
      7.705964e-11, 5.553806e-11, 4.453896e-11, 3.84223e-11,  3.492061e-11,
      3.273378e-11, 3.122566e-11, 3.010689e-11, 2.921979e-11, 2.84214e-11,
      2.77305e-11};
  constexpr std::array<double, N> HF = {
      1.00085e-14,  1.00085e-14,  1.000564e-14, 1.230585e-14, 1.971739e-14,
      3.182688e-14, 5.633105e-14, 9.184567e-14, 1.531455e-13, 2.410595e-13,
      4.042887e-13, 6.574725e-13, 1.200826e-12, 1.960648e-12, 3.123022e-12,
      4.624283e-12, 7.094974e-12, 1.050609e-11, 1.690848e-11, 2.571909e-11,
      4.022565e-11, 5.77654e-11,  7.77849e-11,  9.909287e-11, 1.231207e-10,
      1.501217e-10, 1.821727e-10, 2.301151e-10, 2.831278e-10, 3.202059e-10,
      3.48193e-10,  3.723023e-10, 3.952456e-10, 4.103413e-10, 4.213763e-10,
      4.244316e-10, 4.252905e-10, 4.254112e-10, 4.252976e-10, 4.253915e-10,
      4.254036e-10, 4.253434e-10, 4.252703e-10, 4.252901e-10, 4.252776e-10,
      4.238829e-10};
  constexpr std::array<double, N> z = {
      -616.93, 0.0,     1000.0,  2000.0,  3000.0,  4000.0,  5000.0,  6000.0,
      7000.0,  8000.0,  9000.0,  10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
      15000.0, 16000.0, 17000.0, 18000.0, 19000.0, 20000.0, 21000.0, 22000.0,
      23000.0, 24000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0,
      40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 55000.0, 60000.0, 65000.0,
      70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 95000.0};
  constexpr std::array<double, N> C2H2 = {
      3.002551e-10, 3.002551e-10, 1.720804e-10, 9.574823e-11, 6.744326e-11,
      5.074768e-11, 3.992684e-11, 3.191692e-11, 2.803038e-11, 2.550607e-11,
      2.401993e-11, 2.271505e-11, 2.080973e-11, 1.761695e-11, 1.230882e-11,
      7.32469e-12,  4.523778e-12, 2.591759e-12, 1.550782e-12, 8.635074e-13,
      5.303805e-13, 3.102954e-13, 1.89175e-13,  1.041083e-13, 5.754827e-14,
      2.231567e-14, 8.516819e-15, 4.092542e-15, 2.52219e-15,  1.86126e-15,
      1.520459e-15, 1.321393e-15, 1.180826e-15, 1.080777e-15, 9.976906e-16,
      9.345283e-16, 8.835601e-16, 8.437654e-16, 8.106257e-16, 7.835606e-16,
      7.610774e-16, 7.406157e-16, 7.235229e-16, 7.072036e-16, 6.946061e-16,
      6.791277e-16};
  constexpr std::array<double, N> C2H6 = {
      2.001701e-09, 2.001701e-09, 2.001127e-09, 2.001208e-09, 2.001945e-09,
      1.982068e-09, 1.951244e-09, 1.900907e-09, 1.851803e-09, 1.790675e-09,
      1.721064e-09, 1.581667e-09, 1.300883e-09, 9.86742e-10,  7.224091e-10,
      4.96456e-10,  3.352738e-10, 2.141626e-10, 1.490803e-10, 1.050857e-10,
      7.967536e-11, 6.014463e-11, 4.574972e-11, 3.402898e-11, 2.602082e-11,
      1.891845e-11, 1.221385e-11, 5.744744e-12, 2.141712e-12, 8.49723e-13,
      3.421792e-13, 1.341264e-13, 5.393815e-14, 2.250817e-14, 1.040852e-14,
      6.572849e-15, 4.743294e-15, 3.793913e-15, 3.282288e-15, 2.981942e-15,
      2.792876e-15, 2.661995e-15, 2.561761e-15, 2.491244e-15, 2.431747e-15,
      2.363874e-15};
  constexpr std::array<double, N> ClO = {
      1.00085e-14,  1.00085e-14,  1.000564e-14, 1.000604e-14, 1.000972e-14,
      1.000904e-14, 1.000604e-14, 1.000631e-14, 1.001085e-14, 1.010479e-14,
      1.050547e-14, 1.210761e-14, 1.871775e-14, 3.181641e-14, 5.613958e-14,
      9.99674e-14,  1.781253e-13, 3.161334e-13, 5.654651e-13, 1.040741e-12,
      2.041563e-12, 4.644471e-12, 8.161251e-12, 1.07072e-11,  1.521217e-11,
      2.241956e-11, 3.97346e-11,  8.486964e-11, 1.851553e-10, 3.572379e-10,
      5.082573e-10, 6.074976e-10, 5.953901e-10, 4.332342e-10, 2.511934e-10,
      1.561052e-10, 1.040936e-10, 7.69716e-11,  6.304867e-11, 5.524838e-11,
      5.044933e-11, 4.723601e-11, 4.492094e-11, 4.302508e-11, 4.163741e-11,
      4.019861e-11};
  constexpr std::array<double, N> O3 = {
      2.780304e-08, 2.780304e-08, 2.801578e-08, 2.850654e-08, 3.202904e-08,
      3.570509e-08, 4.722697e-08, 5.84089e-08,  7.899172e-08, 1.039034e-07,
      1.568011e-07, 2.371909e-07, 3.626563e-07, 5.235348e-07, 7.040824e-07,
      8.005244e-07, 9.006824e-07, 1.100822e-06, 1.400662e-06, 1.801064e-06,
      2.301312e-06, 2.902656e-06, 3.503889e-06, 3.902922e-06, 4.303888e-06,
      4.704159e-06, 5.103515e-06, 5.603746e-06, 6.106043e-06, 6.802614e-06,
      7.101145e-06, 7.205793e-06, 6.905517e-06, 5.904066e-06, 4.603875e-06,
      3.702679e-06, 2.751658e-06, 1.701645e-06, 1.000711e-06, 5.503831e-07,
      3.202896e-07, 2.501617e-07, 2.301529e-07, 5.503363e-07, 8.006125e-07,
      7.980895e-07};
  constexpr std::array<double, N> CO = {
      1.50146e-07,  1.50146e-07,  1.450817e-07, 1.399825e-07, 1.350428e-07,
      1.313251e-07, 1.303641e-07, 1.288603e-07, 1.2487e-07,   1.185493e-07,
      1.095317e-07, 9.969579e-08, 8.970756e-08, 7.820131e-08, 6.378818e-08,
      5.027817e-08, 3.94335e-08,  3.072199e-08, 2.490335e-08, 1.967373e-08,
      1.549979e-08, 1.332367e-08, 1.23327e-08,  1.233342e-08, 1.307713e-08,
      1.401482e-08, 1.499028e-08, 1.599237e-08, 1.711477e-08, 1.851197e-08,
      1.997918e-08, 2.148732e-08, 2.33325e-08,  2.62403e-08,  3.060027e-08,
      3.805866e-08, 6.246689e-08, 1.480988e-07, 2.928641e-07, 5.587859e-07,
      1.078927e-06, 1.898487e-06, 2.962811e-06, 4.528765e-06, 6.868156e-06,
      1.051373e-05};
  constexpr std::array<double, N> NO2 = {
      2.301845e-11, 2.301845e-11, 2.301296e-11, 2.301203e-11, 2.302445e-11,
      2.301963e-11, 2.30165e-11,  2.301596e-11, 2.302904e-11, 2.300981e-11,
      2.321823e-11, 2.381359e-11, 2.621861e-11, 3.152761e-11, 4.452643e-11,
      7.486103e-11, 1.711246e-10, 3.191046e-10, 5.193542e-10, 7.716535e-10,
      1.060761e-09, 1.391571e-09, 1.762e-09,    2.161957e-09, 2.582511e-09,
      3.06269e-09,  3.743309e-09, 4.813799e-09, 6.165535e-09, 7.213186e-09,
      7.283382e-09, 6.26465e-09,  4.033417e-09, 2.171942e-09, 1.150969e-09,
      6.666302e-10, 4.43284e-10,  3.39335e-10,  2.851281e-10, 2.531692e-10,
      2.312374e-10, 2.152076e-10, 2.021302e-10, 1.921368e-10, 1.832158e-10,
      1.755666e-10};
  constexpr std::array<double, N> N2O = {
      3.202648e-07, 3.202648e-07, 3.201803e-07, 3.202118e-07, 3.202904e-07,
      3.203008e-07, 3.201675e-07, 3.201872e-07, 3.203471e-07, 3.196319e-07,
      3.165175e-07, 3.098366e-07, 2.990711e-07, 2.937764e-07, 2.861211e-07,
      2.802926e-07, 2.726486e-07, 2.612855e-07, 2.422382e-07, 2.175359e-07,
      1.844267e-07, 1.6223e-07,   1.363669e-07, 1.231062e-07, 1.125345e-07,
      1.049293e-07, 9.667575e-08, 8.69846e-08,  7.531146e-08, 6.130403e-08,
      5.118413e-08, 3.971405e-08, 2.996859e-08, 2.081525e-08, 1.311994e-08,
      8.075882e-09, 4.166966e-09, 2.630989e-09, 1.810232e-09, 1.32169e-09,
      1.007767e-09, 7.888661e-10, 6.33681e-10,  5.197251e-10, 4.336245e-10,
      3.657093e-10};
  constexpr std::array<double, N> CH4 = {
      1.701557e-06, 1.701557e-06, 1.700958e-06, 1.701212e-06, 1.701445e-06,
      1.69875e-06,  1.68779e-06,  1.673293e-06, 1.650768e-06, 1.629478e-06,
      1.615905e-06, 1.580485e-06, 1.542838e-06, 1.508993e-06, 1.479976e-06,
      1.452068e-06, 1.423068e-06, 1.391106e-06, 1.356631e-06, 1.323991e-06,
      1.281713e-06, 1.225025e-06, 1.15542e-06,  1.06692e-06,  9.741128e-07,
      8.806792e-07, 7.937178e-07, 7.134834e-07, 6.444065e-07, 5.748008e-07,
      5.052201e-07, 4.484427e-07, 3.933875e-07, 3.397387e-07, 2.877422e-07,
      2.38772e-07,  1.945443e-07, 1.575413e-07, 1.501159e-07, 1.500949e-07,
      1.501823e-07, 1.50097e-07,  1.50112e-07,  1.500917e-07, 1.400898e-07,
      1.296814e-07};
  constexpr std::array<double, N> COF2 = {
      1.00085e-20,  1.00085e-20,  1.000564e-20, 1.000604e-20, 1.000972e-20,
      1.000904e-20, 1.000604e-20, 1.000631e-20, 1.001085e-20, 1.000346e-20,
      1.000778e-20, 1.000738e-20, 1.000711e-20, 1.000701e-20, 1.000676e-20,
      1.000765e-20, 1.00073e-20,  1.000693e-20, 1.000572e-20, 1.000681e-20,
      1.000673e-20, 1.000935e-20, 1.001018e-20, 1.000808e-20, 1.000801e-20,
      1.000777e-20, 1.000732e-20, 1.000721e-20, 1.000818e-20, 1.000669e-20,
      1.000478e-20, 1.000754e-20, 1.000723e-20, 1.000748e-20, 1.000734e-20,
      1.000724e-20, 1.000652e-20, 1.000909e-20, 1.000711e-20, 1.000633e-20,
      1.00099e-20,  1.000784e-20, 1.000653e-20, 1.000611e-20, 1.0008e-20,
      9.974484e-21};
  constexpr std::array<double, N> N2 = {
      0.7815568, 0.7815568, 0.7814319, 0.781287,  0.7817168, 0.7814481,
      0.7812761, 0.7817427, 0.7818268, 0.7813019, 0.7816109, 0.7816197,
      0.7816036, 0.7815317, 0.7815034, 0.7815474, 0.7815418, 0.78142,
      0.7814582, 0.781365,  0.7816134, 0.7818248, 0.7817415, 0.7819522,
      0.7816032, 0.7815677, 0.7815405, 0.7816322, 0.7815085, 0.7816968,
      0.7811867, 0.7815458, 0.7815989, 0.7816299, 0.7816073, 0.7814993,
      0.7815075, 0.7817428, 0.7815235, 0.7814599, 0.7820866, 0.7816011,
      0.7815399, 0.7816143, 0.7805798, 0.7771731};
  constexpr std::array<double, N> H2CO = {
      2.401893e-09, 2.401893e-09, 1.070438e-09, 4.042291e-10, 2.272239e-10,
      1.401498e-10, 1.000604e-10, 7.446553e-11, 6.046552e-11, 5.011864e-11,
      4.22301e-11,  3.632282e-11, 3.432504e-11, 3.391825e-11, 3.502646e-11,
      3.623082e-11, 3.622586e-11, 3.583241e-11, 3.501654e-11, 3.422468e-11,
      3.392354e-11, 3.433279e-11, 3.683592e-11, 4.033627e-11, 4.504048e-11,
      5.06362e-11,  5.824413e-11, 7.214371e-11, 8.737211e-11, 1.010732e-10,
      1.110427e-10, 1.130816e-10, 1.030718e-10, 7.956735e-11, 4.822448e-11,
      1.631141e-11, 5.103164e-12, 2.001818e-12, 1.050811e-12, 6.865784e-13,
      5.145236e-13, 4.162965e-13, 3.531715e-13, 3.091974e-13, 2.762843e-13,
      2.493621e-13};
  constexpr std::array<double, N> O2 = {
      0.2091781, 0.2091781, 0.2091261, 0.209116,  0.2092043, 0.2091796,
      0.2091406, 0.2091434, 0.2092063, 0.2090963, 0.2091723, 0.2091958,
      0.2091983, 0.2092214, 0.2090741, 0.2091616, 0.2091579, 0.2091413,
      0.2091285, 0.2091598, 0.2091242, 0.2092059, 0.2092213, 0.2092045,
      0.2091451, 0.2091314, 0.2092064, 0.2091463, 0.2091685, 0.2091502,
      0.2090859, 0.209183,  0.2091696, 0.2091144, 0.2091664, 0.2091396,
      0.209154,  0.2092268, 0.2090571, 0.2091246, 0.2092116, 0.2091763,
      0.2091429, 0.2001223, 0.1901716, 0.1795538};
  constexpr std::array<double, N> SF6 = {
      1.00085e-20,  1.00085e-20,  1.000564e-20, 1.000604e-20, 1.000972e-20,
      1.000904e-20, 1.000604e-20, 1.000631e-20, 1.001085e-20, 1.000346e-20,
      1.000778e-20, 1.000738e-20, 1.000711e-20, 1.000701e-20, 1.000676e-20,
      1.000765e-20, 1.00073e-20,  1.000693e-20, 1.000572e-20, 1.000681e-20,
      1.000673e-20, 1.000935e-20, 1.001018e-20, 1.000808e-20, 1.000801e-20,
      1.000777e-20, 1.000732e-20, 1.000721e-20, 1.000818e-20, 1.000669e-20,
      1.000478e-20, 1.000754e-20, 1.000723e-20, 1.000748e-20, 1.000734e-20,
      1.000724e-20, 1.000652e-20, 1.000909e-20, 1.000711e-20, 1.000633e-20,
      1.00099e-20,  1.000784e-20, 1.000653e-20, 1.000611e-20, 1.0008e-20,
      9.974484e-21};
  constexpr std::array<double, N> HCN = {
      1.701557e-10, 1.701557e-10, 1.65093e-10,  1.631197e-10, 1.611347e-10,
      1.601214e-10, 1.600837e-10, 1.6013e-10,   1.601736e-10, 1.600923e-10,
      1.601329e-10, 1.601748e-10, 1.600643e-10, 1.601089e-10, 1.591058e-10,
      1.571166e-10, 1.551119e-10, 1.520946e-10, 1.490803e-10, 1.451049e-10,
      1.410878e-10, 1.371098e-10, 1.341611e-10, 1.300974e-10, 1.250779e-10,
      1.190584e-10, 1.130786e-10, 1.050793e-10, 9.737759e-11, 9.044659e-11,
      8.461844e-11, 8.025906e-11, 7.635487e-11, 7.304575e-11, 7.005415e-11,
      6.70524e-11,  6.434681e-11, 6.215178e-11, 6.024896e-11, 5.885458e-11,
      5.75586e-11,  5.624183e-11, 5.503167e-11, 5.373296e-11, 5.254411e-11,
      5.108165e-11};
  constexpr std::array<double, N> SO2 = {
      3.002551e-10, 3.002551e-10, 2.741627e-10, 2.361481e-10, 1.901952e-10,
      1.461296e-10, 1.180999e-10, 9.715425e-11, 8.311047e-11, 7.212442e-11,
      6.564615e-11, 6.084514e-11, 5.794244e-11, 5.604374e-11, 5.593388e-11,
      5.645115e-11, 5.75337e-11,  5.755173e-11, 5.373826e-11, 4.782876e-11,
      3.972886e-11, 3.193143e-11, 2.672842e-11, 2.282024e-11, 2.07188e-11,
      1.901195e-11, 1.751099e-11, 1.54103e-11,  1.341004e-11, 1.210785e-11,
      1.160846e-11, 1.211202e-11, 1.360399e-11, 1.651176e-11, 2.101624e-11,
      2.772044e-11, 3.56217e-11,  4.594044e-11, 5.153671e-11, 5.1117e-11,
      4.324519e-11, 2.831967e-11, 1.33073e-11,  5.563255e-12, 2.241159e-12,
      8.938471e-13};
  constexpr std::array<double, N> NO = {
      3.002551e-10, 3.002551e-10, 3.001691e-10, 3.001811e-10, 3.002917e-10,
      3.002711e-10, 3.001813e-10, 3.001892e-10, 3.003254e-10, 3.001039e-10,
      3.002752e-10, 3.002686e-10, 3.001721e-10, 3.001942e-10, 2.992116e-10,
      2.951252e-10, 2.830862e-10, 2.681786e-10, 2.521538e-10, 2.401554e-10,
      2.441832e-10, 2.552412e-10, 2.772749e-10, 3.072335e-10, 3.602883e-10,
      4.513e-10,    6.854614e-10, 1.280908e-09, 2.451882e-09, 4.532392e-09,
      7.143667e-09, 9.348202e-09, 1.120836e-08, 1.190817e-08, 1.170889e-08,
      1.100796e-08, 1.030731e-08, 1.010849e-08, 1.010657e-08, 1.030743e-08,
      1.151443e-08, 1.61063e-08,  2.681738e-08, 7.01154e-08,  2.131257e-07,
      7.101754e-07};
  constexpr std::array<double, N> HOCl = {
      7.704813e-12, 7.704813e-12, 1.060515e-11, 1.220848e-11, 1.141067e-11,
      9.811644e-12, 8.01392e-12,  6.424107e-12, 5.426288e-12, 4.701444e-12,
      4.413545e-12, 4.343382e-12, 4.653287e-12, 5.013933e-12, 5.223113e-12,
      5.603671e-12, 6.865858e-12, 8.776862e-12, 1.200617e-11, 1.631115e-11,
      2.261569e-11, 3.073075e-11, 4.294064e-11, 5.764713e-11, 7.655904e-11,
      9.92777e-11,  1.311498e-10, 1.842006e-10, 2.451882e-10, 2.962156e-10,
      3.211613e-10, 3.042004e-10, 2.481898e-10, 1.641173e-10, 9.747266e-11,
      4.921849e-11, 2.53144e-11,  1.500867e-11, 1.050811e-11, 8.346776e-12,
      7.11604e-12,  6.335602e-12, 5.784803e-12, 5.373296e-12, 5.054084e-12,
      4.768274e-12};
  constexpr std::array<double, N> t = {
      272.2, 272.2, 268.7, 265.2, 261.7, 255.7, 249.7, 243.7, 237.7, 231.7,
      225.7, 219.7, 219.2, 218.7, 218.2, 217.7, 217.2, 216.7, 216.2, 215.7,
      215.2, 215.2, 215.2, 215.2, 215.2, 215.2, 215.2, 215.5, 217.4, 220.4,
      227.9, 235.5, 243.2, 250.8, 258.5, 265.1, 265.7, 260.6, 250.8, 240.9,
      230.7, 220.4, 210.1, 199.8, 199.5, 208.3};
  constexpr std::array<double, N> H2O = {
      0.004319421,  0.004319421,  0.003456079,  0.002789913,  0.00208996,
      0.001281319,  0.0008247524, 0.0005106416, 0.0002323334, 0.0001077721,
      5.570292e-05, 2.962524e-05, 1.000711e-05, 6.003884e-06, 5.002445e-06,
      4.803147e-06, 4.704525e-06, 4.602356e-06, 4.503612e-06, 4.503673e-06,
      4.502793e-06, 4.503931e-06, 4.504907e-06, 4.533651e-06, 4.553866e-06,
      4.603385e-06, 4.652954e-06, 4.703532e-06, 4.753952e-06, 4.802082e-06,
      4.852348e-06, 4.903516e-06, 4.953179e-06, 5.00374e-06,  5.002287e-06,
      5.00362e-06,  4.953308e-06, 4.854459e-06, 4.503476e-06, 4.001831e-06,
      3.303198e-06, 2.701746e-06, 2.001305e-06, 1.330922e-06, 8.506942e-07,
      5.38596e-07};
  constexpr std::array<double, N> NH3 = {
      5.006098e-10, 5.006098e-10, 5.002818e-10, 4.633009e-10, 3.803904e-10,
      2.882533e-10, 2.041441e-10, 1.46095e-10,  9.888266e-11, 6.481987e-11,
      3.773222e-11, 2.031715e-11, 1.090722e-11, 6.303917e-12, 3.123022e-12,
      1.110919e-12, 4.472863e-13, 2.11132e-13,  1.100767e-13, 6.704929e-14,
      3.972886e-14, 2.412425e-14, 1.922241e-14, 1.721207e-14, 1.591496e-14,
      1.44096e-14,  1.231127e-14, 9.376333e-15, 6.354827e-15, 3.682267e-15,
      1.821149e-15, 9.266913e-16, 2.942443e-16, 8.726245e-17, 2.982558e-17,
      1.300941e-17, 7.132935e-18, 4.804761e-18, 3.661722e-18, 3.001898e-18,
      2.572618e-18, 2.271331e-18, 2.041298e-18, 1.851192e-18, 1.711127e-18,
      1.586048e-18};
  constexpr std::array<double, N> CH3Cl = {
      7.007061e-10, 7.007061e-10, 6.702122e-10, 6.435765e-10, 6.223528e-10,
      6.072769e-10, 6.023743e-10, 6.003784e-10, 6.006509e-10, 5.981814e-10,
      5.945115e-10, 5.884887e-10, 5.794244e-10, 5.663739e-10, 5.483053e-10,
      5.283025e-10, 5.032926e-10, 4.774684e-10, 4.493212e-10, 4.21233e-10,
      3.952541e-10, 3.693334e-10, 3.433175e-10, 3.172644e-10, 2.862735e-10,
      2.481942e-10, 1.911839e-10, 1.100865e-10, 4.724206e-11, 1.791221e-11,
      7.356276e-12, 3.032069e-12, 1.32098e-12,  8.697388e-13, 6.684472e-13,
      5.603276e-13, 4.943102e-13, 4.564225e-13, 4.322969e-13, 4.173388e-13,
      4.054109e-13, 3.962835e-13, 3.892209e-13, 3.832451e-13, 3.782564e-13,
      3.719188e-13};
  constexpr std::array<double, N> HI = {
      3.002551e-12, 3.002551e-12, 3.001691e-12, 3.001811e-12, 3.002917e-12,
      3.002711e-12, 3.001813e-12, 3.001892e-12, 3.003254e-12, 3.001039e-12,
      3.002752e-12, 3.002686e-12, 3.001721e-12, 3.001942e-12, 3.001467e-12,
      3.001421e-12, 3.001426e-12, 3.00089e-12,  3.001715e-12, 3.002044e-12,
      3.00202e-12,  3.002805e-12, 3.003055e-12, 3.002423e-12, 3.002402e-12,
      3.002434e-12, 3.00171e-12,  3.002523e-12, 3.001642e-12, 3.002006e-12,
      3.001434e-12, 3.002263e-12, 3.002168e-12, 3.003013e-12, 3.001925e-12,
      3.002172e-12, 3.001956e-12, 3.002727e-12, 3.002317e-12, 3.001898e-12,
      3.002969e-12, 3.00194e-12,  3.00224e-12,  3.001834e-12, 3.002123e-12,
      2.992345e-12};
  constexpr std::array<double, N> CO2 = {
      0.0003302696, 0.0003302696, 0.000330186,  0.0003301807, 0.0003303418,
      0.0003302866, 0.0003302254, 0.0003302226, 0.0003303171, 0.0003301327,
      0.0003302611, 0.0003302718, 0.0003301756, 0.0003301976, 0.0003302548,
      0.0003302436, 0.0003301823, 0.0003300979, 0.0003301956, 0.0003302289,
      0.0003301985, 0.0003303251, 0.0003303425, 0.0003302589, 0.0003302198,
      0.0003302677, 0.000330249,  0.0003302595, 0.0003301806, 0.0003302287,
      0.0003301516, 0.0003302128, 0.0003302119, 0.0003303122, 0.0003303501,
      0.0003302389, 0.0003302205, 0.0003302901, 0.0003302549, 0.0003301948,
      0.0003303198, 0.0003302134, 0.0003281059, 0.0003202078, 0.0003102286,
      0.000269298};

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::t_field(ws).value()(j, k, m) = t[j];

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::z_field(ws).value()(j, k, m) = z[j];

  for (std::size_t i = 0; i < nspe; i++) {
    if (Var::abs_species(ws).value()[i].nelem()) {
      if (Species::isOH(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = OH[j];
      } else if (Species::isH2O2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O2[j];
      } else if (Species::isPH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = PH3[j];
      } else if (Species::isHCl(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCl[j];
      } else if (Species::isHBr(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HBr[j];
      } else if (Species::isHNO3(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HNO3[j];
      } else if (Species::isHF(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HF[j];
      } else if (Species::isC2H2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H2[j];
      } else if (Species::isC2H6(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H6[j];
      } else if (Species::isClO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = ClO[j];
      } else if (Species::isO3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O3[j];
      } else if (Species::isCO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO[j];
      } else if (Species::isNO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO2[j];
      } else if (Species::isN2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2O[j];
      } else if (Species::isCH4(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH4[j];
      } else if (Species::isCOF2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = COF2[j];
      } else if (Species::isN2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2[j];
      } else if (Species::isH2CO(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2CO[j];
      } else if (Species::isO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O2[j];
      } else if (Species::isSF6(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SF6[j];
      } else if (Species::isHCN(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCN[j];
      } else if (Species::isSO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SO2[j];
      } else if (Species::isNO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO[j];
      } else if (Species::isHOCl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HOCl[j];
      } else if (Species::isH2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O[j];
      } else if (Species::isNH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NH3[j];
      } else if (Species::isCH3Cl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH3Cl[j];
      } else if (Species::isHI(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HI[j];
      } else if (Species::isCO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO2[j];
      }
    }
  }
  return ws;
}

Workspace& fascod_tropical(Workspace& ws) {
  constexpr std::size_t N = 46;
  const std::size_t nlat =
      Var::lat_grid(ws).value().nelem() ? Var::lat_grid(ws).value().nelem() : 1;
  const std::size_t nlon =
      Var::lon_grid(ws).value().nelem() ? Var::lon_grid(ws).value().nelem() : 1;
  const std::size_t nspe = Var::abs_species(ws).value().nelem();

  Var::p_grid(ws) = {
      110000.0, 101300.0, 90400.0, 80500.0, 71500.0, 63300.0, 55900.0, 49200.0,
      43200.0,  37800.0,  32900.0, 28600.0, 24700.0, 21300.0, 18200.0, 15600.0,
      13200.0,  11100.0,  9370.0,  7890.0,  6660.0,  5650.0,  4800.0,  4090.0,
      3500.0,   3000.0,   2570.0,  1763.0,  1220.0,  852.0,   600.0,   426.0,
      305.0,    220.0,    159.0,   116.0,   85.4,    45.6,    23.9,    12.1,
      5.8,      2.6,      1.1,     0.44,    0.172,   0.069};

  Var::t_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::z_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::vmr_field(ws) = Tensor4(nspe, N, nlat, nlon, 0.0);

  constexpr std::array<double, N> OH = {
      4.403473e-14, 4.403473e-14, 4.40321e-14,  4.403056e-14, 4.404074e-14,
      4.402147e-14, 4.403664e-14, 4.403678e-14, 4.411678e-14, 4.455175e-14,
      4.563572e-14, 4.684136e-14, 4.802787e-14, 4.943941e-14, 5.193822e-14,
      5.654598e-14, 6.754228e-14, 8.255504e-14, 1.040535e-13, 1.301099e-13,
      1.640967e-13, 2.161393e-13, 3.40187e-13,  5.092128e-13, 7.59559e-13,
      1.161165e-12, 2.181439e-12, 5.004391e-12, 1.170952e-11, 3.402492e-11,
      8.357639e-11, 1.701828e-10, 2.851576e-10, 4.063415e-10, 5.113932e-10,
      5.795341e-10, 6.753615e-10, 9.53853e-10,  1.761897e-09, 3.74318e-09,
      7.191114e-09, 1.120931e-08, 1.130793e-08, 6.107492e-09, 1.510349e-09,
      2.415186e-10};
  constexpr std::array<double, N> O2 = {
      0.2091446, 0.2091446, 0.2091704, 0.2091735, 0.2091648, 0.2091111,
      0.2091674, 0.2091987, 0.2091256, 0.2092735, 0.2091637, 0.20915,
      0.2091412, 0.20915,   0.2092345, 0.209209,  0.209168,  0.2091688,
      0.2091404, 0.2091847, 0.2091025, 0.2091181, 0.2091547, 0.209075,
      0.2091291, 0.2091308, 0.2091042, 0.2090645, 0.2091886, 0.2091649,
      0.2091648, 0.2092451, 0.2091539, 0.2091943, 0.2091561, 0.2091906,
      0.2091611, 0.2091937, 0.2090882, 0.2091334, 0.2091155, 0.2091833,
      0.209133,  0.2001746, 0.1901079, 0.1796361};
  constexpr std::array<double, N> CH3Cl = {
      7.005526e-10, 7.005526e-10, 6.706193e-10, 6.43459e-10,  6.223446e-10,
      6.072135e-10, 6.024661e-10, 6.005217e-10, 6.002708e-10, 5.986556e-10,
      5.944707e-10, 5.884345e-10, 5.794471e-10, 5.664298e-10, 5.483556e-10,
      5.284202e-10, 5.034776e-10, 4.773441e-10, 4.492241e-10, 4.212916e-10,
      3.952188e-10, 3.6924e-10,   3.432173e-10, 3.171623e-10, 2.861722e-10,
      2.481725e-10, 1.911436e-10, 1.100788e-10, 4.724293e-11, 1.791191e-11,
      7.356289e-12, 3.033168e-12, 1.321153e-12, 8.69662e-13,  6.684443e-13,
      5.606013e-13, 4.945079e-13, 4.564298e-13, 4.323594e-13, 4.17405e-13,
      4.052036e-13, 3.962909e-13, 3.892249e-13, 3.833438e-13, 3.782267e-13,
      3.721061e-13};
  constexpr std::array<double, N> HF = {
      1.000789e-14, 1.000789e-14, 1.00077e-14,  1.230665e-14, 1.971671e-14,
      3.181678e-14, 5.6341e-14,   9.187582e-14, 1.531068e-13, 2.412725e-13,
      4.043218e-13, 6.57541e-13,  1.200825e-12, 1.961053e-12, 3.122878e-12,
      4.623444e-12, 7.095135e-12, 1.050745e-11, 1.690977e-11, 2.572279e-11,
      4.022366e-11, 5.773479e-11, 7.775875e-11, 9.90317e-11,  1.230977e-10,
      1.501141e-10, 1.821038e-10, 2.302198e-10, 2.831421e-10, 3.202572e-10,
      3.482909e-10, 3.724208e-10, 3.953112e-10, 4.102486e-10, 4.212556e-10,
      4.242215e-10, 4.253554e-10, 4.254057e-10, 4.25341e-10,  4.252145e-10,
      4.252137e-10, 4.253322e-10, 4.251783e-10, 4.253571e-10, 4.252564e-10,
      4.24105e-10};
  constexpr std::array<double, N> C2H6 = {
      2.001579e-09, 2.001579e-09, 2.001541e-09, 2.001434e-09, 2.001802e-09,
      1.981147e-09, 1.951472e-09, 1.901874e-09, 1.850589e-09, 1.791944e-09,
      1.721563e-09, 1.58121e-09,  1.30038e-09,  9.86614e-10,  7.225256e-10,
      4.96406e-10,  3.351546e-10, 2.141677e-10, 1.490907e-10, 1.050968e-10,
      7.963208e-11, 6.015935e-11, 4.572796e-11, 3.401272e-11, 2.601487e-11,
      1.891559e-11, 1.220369e-11, 5.743939e-12, 2.141837e-12, 8.497564e-13,
      3.422493e-13, 1.34181e-13,  5.393847e-14, 2.251484e-14, 1.040722e-14,
      6.575112e-15, 4.74413e-15,  3.793081e-15, 3.282539e-15, 2.98108e-15,
      2.791507e-15, 2.661943e-15, 2.560812e-15, 2.491901e-15, 2.431051e-15,
      2.365031e-15};
  constexpr std::array<double, N> NH3 = {
      5.003947e-10, 5.003947e-10, 5.006094e-10, 4.633497e-10, 3.803643e-10,
      2.881394e-10, 2.041602e-10, 1.460988e-10, 9.881306e-11, 6.487569e-11,
      3.772307e-11, 2.032004e-11, 1.090724e-11, 6.304937e-12, 3.122878e-12,
      1.110818e-12, 4.474409e-13, 2.111537e-13, 1.100814e-13, 6.707269e-14,
      3.972359e-14, 2.411425e-14, 1.921241e-14, 1.720558e-14, 1.591367e-14,
      1.440611e-14, 1.231074e-14, 9.375901e-15, 6.354265e-15, 3.68292e-15,
      1.821451e-15, 9.27025e-16,  2.942412e-16, 8.725924e-17, 2.982361e-17,
      1.301224e-17, 7.133669e-18, 4.804356e-18, 3.6627e-18,   3.002623e-18,
      2.571084e-18, 2.271868e-18, 2.041459e-18, 1.851698e-18, 1.710687e-18,
      1.58689e-18};
  constexpr std::array<double, N> HOCl = {
      7.708121e-12, 7.708121e-12, 1.060879e-11, 1.220796e-11, 1.141148e-11,
      9.806045e-12, 8.018194e-12, 6.425389e-12, 5.422808e-12, 4.705682e-12,
      4.413293e-12, 4.34318e-12,  4.653584e-12, 5.013512e-12, 5.223454e-12,
      5.604344e-12, 6.865022e-12, 8.777446e-12, 1.200706e-11, 1.631592e-11,
      2.261215e-11, 3.072117e-11, 4.292792e-11, 5.762964e-11, 7.655512e-11,
      9.92791e-11,  1.310767e-10, 1.841758e-10, 2.452058e-10, 2.962206e-10,
      3.212712e-10, 3.043638e-10, 2.481331e-10, 1.640995e-10, 9.747284e-11,
      4.925719e-11, 2.53195e-11,  1.500963e-11, 1.050705e-11, 8.345407e-12,
      7.11295e-12,  6.334438e-12, 5.782703e-12, 5.374482e-12, 5.053916e-12,
      4.768416e-12};
  constexpr std::array<double, N> SF6 = {
      1.000789e-20, 1.000789e-20, 1.00077e-20,  1.000717e-20, 1.000901e-20,
      1.000543e-20, 1.000772e-20, 1.000869e-20, 1.000451e-20, 1.001112e-20,
      1.000735e-20, 1.000785e-20, 1.000688e-20, 1.000673e-20, 1.000737e-20,
      1.000816e-20, 1.000776e-20, 1.000756e-20, 1.000636e-20, 1.000872e-20,
      1.000549e-20, 1.000635e-20, 1.000621e-20, 1.000459e-20, 1.000704e-20,
      1.000761e-20, 1.000679e-20, 1.000701e-20, 1.000856e-20, 1.000756e-20,
      1.000791e-20, 1.001123e-20, 1.000696e-20, 1.000714e-20, 1.000712e-20,
      1.000868e-20, 1.000811e-20, 1.000908e-20, 1.000699e-20, 1.000695e-20,
      1.000503e-20, 1.000693e-20, 1.000665e-20, 1.000873e-20, 1.000695e-20,
      9.979375e-21};
  constexpr std::array<double, N> HCl = {
      1.000789e-09, 1.000789e-09, 7.495684e-10, 5.615463e-10, 4.223836e-10,
      3.191949e-10, 2.392106e-10, 1.791652e-10, 1.320793e-10, 9.974546e-11,
      7.485321e-11, 5.68412e-11,  4.593131e-11, 4.362727e-11, 6.514089e-11,
      1.010866e-10, 1.631242e-10, 2.371773e-10, 3.131652e-10, 3.854592e-10,
      4.420736e-10, 4.893061e-10, 5.223109e-10, 5.492746e-10, 5.754261e-10,
      6.044918e-10, 6.514582e-10, 7.514587e-10, 9.887626e-10, 1.280798e-09,
      1.571393e-09, 1.692163e-09, 1.740841e-09, 1.761464e-09, 1.791256e-09,
      1.801497e-09, 1.801546e-09, 1.801634e-09, 1.801376e-09, 1.801305e-09,
      1.800905e-09, 1.801419e-09, 1.801151e-09, 1.801682e-09, 1.801621e-09,
      1.796361e-09};
  constexpr std::array<double, N> COF2 = {
      1.000789e-20, 1.000789e-20, 1.00077e-20,  1.000717e-20, 1.000901e-20,
      1.000543e-20, 1.000772e-20, 1.000869e-20, 1.000451e-20, 1.001112e-20,
      1.000735e-20, 1.000785e-20, 1.000688e-20, 1.000673e-20, 1.000737e-20,
      1.000816e-20, 1.000776e-20, 1.000756e-20, 1.000636e-20, 1.000872e-20,
      1.000549e-20, 1.000635e-20, 1.000621e-20, 1.000459e-20, 1.000704e-20,
      1.000761e-20, 1.000679e-20, 1.000701e-20, 1.000856e-20, 1.000756e-20,
      1.000791e-20, 1.001123e-20, 1.000696e-20, 1.000714e-20, 1.000712e-20,
      1.000868e-20, 1.000811e-20, 1.000908e-20, 1.000699e-20, 1.000695e-20,
      1.000503e-20, 1.000693e-20, 1.000665e-20, 1.000873e-20, 1.000695e-20,
      9.979375e-21};
  constexpr std::array<double, N> t = {
      299.7, 299.7, 293.7, 287.7, 283.7, 277.0, 270.3, 263.6, 257.0, 250.3,
      243.6, 237.0, 230.1, 223.6, 217.0, 210.3, 203.7, 197.0, 194.8, 198.8,
      202.7, 206.7, 210.7, 214.6, 217.0, 219.2, 221.4, 227.0, 232.3, 237.7,
      243.1, 248.5, 254.0, 259.4, 264.8, 269.6, 270.2, 263.4, 253.1, 236.0,
      218.9, 201.8, 184.8, 177.1, 177.0, 184.3};
  constexpr std::array<double, N> NO = {
      3.002368e-10, 3.002368e-10, 3.002311e-10, 3.002151e-10, 3.002703e-10,
      3.001629e-10, 3.002316e-10, 3.002608e-10, 3.001354e-10, 3.003335e-10,
      3.002511e-10, 3.00224e-10,  3.002063e-10, 3.00173e-10,  2.992827e-10,
      2.952006e-10, 2.831662e-10, 2.683223e-10, 2.521683e-10, 2.402163e-10,
      2.44149e-10,  2.551847e-10, 2.771557e-10, 3.071649e-10, 3.602191e-10,
      4.513512e-10, 6.854763e-10, 1.280875e-09, 2.452058e-09, 4.533831e-09,
      7.143712e-09, 9.350791e-09, 1.120738e-08, 1.190861e-08, 1.17087e-08,
      1.100986e-08, 1.030953e-08, 1.011276e-08, 1.010642e-08, 1.030586e-08,
      1.150578e-08, 1.610668e-08, 2.68143e-08,  7.018892e-08, 2.131255e-07,
      7.106525e-07};
  constexpr std::array<double, N> HNO3 = {
      5.003947e-11, 5.003947e-11, 5.966044e-11, 6.932975e-11, 7.916268e-11,
      8.875589e-11, 9.760699e-11, 1.111091e-10, 1.260832e-10, 1.391499e-10,
      1.531414e-10, 1.741391e-10, 2.021955e-10, 2.41182e-10,  2.762356e-10,
      3.33357e-10,  4.523415e-10, 7.375799e-10, 1.310931e-09, 2.111677e-09,
      3.171836e-09, 4.202567e-09, 4.943105e-09, 5.462319e-09, 5.743988e-09,
      5.844161e-09, 5.614173e-09, 4.82306e-09,  3.74368e-09,  2.592027e-09,
      1.64132e-09,  9.689062e-10, 5.334056e-10, 2.521727e-10, 1.21088e-10,
      7.707867e-11, 5.556661e-11, 4.454238e-11, 3.842545e-11, 3.492737e-11,
      3.271436e-11, 3.121675e-11, 3.013129e-11, 2.922593e-11, 2.841673e-11,
      2.774384e-11};
  constexpr std::array<double, N> SO2 = {
      3.002368e-10, 3.002368e-10, 2.742138e-10, 2.361653e-10, 1.901548e-10,
      1.460938e-10, 1.181031e-10, 9.720195e-11, 8.304239e-11, 7.21806e-11,
      6.565246e-11, 6.084571e-11, 5.794471e-11, 5.603423e-11, 5.593853e-11,
      5.645292e-11, 5.754943e-11, 5.753613e-11, 5.373466e-11, 4.783452e-11,
      3.972359e-11, 3.19183e-11,  2.671556e-11, 2.281279e-11, 2.071602e-11,
      1.901647e-11, 1.750861e-11, 1.541139e-11, 1.341047e-11, 1.211076e-11,
      1.160783e-11, 1.211334e-11, 1.361397e-11, 1.650762e-11, 2.101449e-11,
      2.772522e-11, 3.562903e-11, 4.593807e-11, 5.154098e-11, 5.113885e-11,
      4.321964e-11, 2.832333e-11, 1.330973e-11, 5.562875e-12, 2.24208e-12,
      8.943084e-13};
  constexpr std::array<double, N> HCN = {
      1.701342e-10, 1.701342e-10, 1.651204e-10, 1.631346e-10, 1.611193e-10,
      1.60111e-10,  1.600968e-10, 1.601539e-10, 1.600886e-10, 1.601779e-10,
      1.60093e-10,  1.601805e-10, 1.601358e-10, 1.601599e-10, 1.591236e-10,
      1.571301e-10, 1.551129e-10, 1.521228e-10, 1.490907e-10, 1.451386e-10,
      1.410685e-10, 1.370886e-10, 1.340626e-10, 1.30038e-10,  1.250666e-10,
      1.190421e-10, 1.130804e-10, 1.050656e-10, 9.737774e-11, 9.048403e-11,
      8.463928e-11, 8.029116e-11, 7.634864e-11, 7.304705e-11, 7.004064e-11,
      6.706679e-11, 6.434718e-11, 6.215995e-11, 6.024081e-11, 5.884064e-11,
      5.752891e-11, 5.623944e-11, 5.504354e-11, 5.374482e-11, 5.254254e-11,
      5.1077e-11};
  constexpr std::array<double, N> PH3 = {
      1.000789e-20, 1.000789e-20, 1.00077e-20,  1.000717e-20, 1.000901e-20,
      1.000543e-20, 1.000772e-20, 1.000869e-20, 1.000451e-20, 1.001112e-20,
      1.000735e-20, 1.000785e-20, 1.000688e-20, 1.000673e-20, 1.000737e-20,
      1.000816e-20, 1.000776e-20, 1.000756e-20, 1.000636e-20, 1.000872e-20,
      1.000549e-20, 1.000635e-20, 1.000621e-20, 1.000459e-20, 1.000704e-20,
      1.000761e-20, 1.000679e-20, 1.000701e-20, 1.000856e-20, 1.000756e-20,
      1.000791e-20, 1.001123e-20, 1.000696e-20, 1.000714e-20, 1.000712e-20,
      1.000868e-20, 1.000811e-20, 1.000908e-20, 1.000699e-20, 1.000695e-20,
      1.000503e-20, 1.000693e-20, 1.000665e-20, 1.000873e-20, 1.000695e-20,
      9.979375e-21};
  constexpr std::array<double, N> CO2 = {
      0.0003302605, 0.0003302605, 0.0003302407, 0.0003302169, 0.0003302919,
      0.0003301912, 0.0003302748, 0.0003302943, 0.0003301161, 0.0003303211,
      0.0003302047, 0.0003303151, 0.0003301755, 0.0003301758, 0.0003302316,
      0.0003301928, 0.000330254,  0.0003303182, 0.0003301008, 0.0003302843,
      0.0003301685, 0.0003301945, 0.0003301868, 0.0003301298, 0.0003302579,
      0.0003302914, 0.0003301895, 0.0003303076, 0.000330201,  0.000330234,
      0.0003302778, 0.0003303785, 0.0003302308, 0.0003303153, 0.0003301981,
      0.0003301996, 0.0003302544, 0.0003302596, 0.0003303009, 0.0003301539,
      0.0003301659, 0.0003302781, 0.00032822,   0.0003202682, 0.0003101686,
      0.0002694358};
  constexpr std::array<double, N> N2O = {
      3.202526e-07, 3.202526e-07, 3.202375e-07, 3.202492e-07, 3.202664e-07,
      3.201616e-07, 3.202604e-07, 3.203078e-07, 3.201773e-07, 3.203557e-07,
      3.197772e-07, 3.181871e-07, 3.142262e-07, 3.097391e-07, 3.050444e-07,
      3.00226e-07,  2.946718e-07, 2.879257e-07, 2.784902e-07, 2.673167e-07,
      2.528476e-07, 2.36647e-07,  2.195185e-07, 2.05163e-07,  1.968022e-07,
      1.876427e-07, 1.756808e-07, 1.589139e-07, 1.417288e-07, 1.166007e-07,
      9.280672e-08, 6.700192e-08, 4.516528e-08, 2.752899e-08, 1.592125e-08,
      9.386141e-09, 4.757236e-09, 3.002723e-09, 2.066026e-09, 1.508044e-09,
      1.149536e-09, 8.895647e-10, 7.060789e-10, 5.71848e-10,  4.711494e-10,
      3.923893e-10};
  constexpr std::array<double, N> H2CO = {
      2.401895e-09, 2.401895e-09, 1.070748e-09, 4.042837e-10, 2.271887e-10,
      1.400518e-10, 1.000772e-10, 7.449191e-11, 6.042956e-11, 5.015615e-11,
      4.223144e-11, 3.632665e-11, 3.432951e-11, 3.391621e-11, 3.503155e-11,
      3.62207e-11,  3.622141e-11, 3.582531e-11, 3.501939e-11, 3.422864e-11,
      3.392032e-11, 3.432265e-11, 3.68248e-11,  4.031539e-11, 4.502739e-11,
      5.064334e-11, 5.823515e-11, 7.215924e-11, 8.738758e-11, 1.010771e-10,
      1.110995e-10, 1.131599e-10, 1.030707e-10, 7.955893e-11, 4.824204e-11,
      1.631424e-11, 5.102343e-12, 2.001815e-12, 1.050705e-12, 6.864293e-13,
      5.142689e-13, 4.163304e-13, 3.532714e-13, 3.092647e-13, 2.762106e-13,
      2.494844e-13};
  constexpr std::array<double, N> C2H2 = {
      3.002368e-10, 3.002368e-10, 1.721181e-10, 9.577868e-11, 6.743893e-11,
      5.072801e-11, 3.993074e-11, 3.192722e-11, 2.800935e-11, 2.552606e-11,
      2.401396e-11, 2.272275e-11, 2.081122e-11, 1.761034e-11, 1.230878e-11,
      7.326037e-12, 4.523415e-12, 2.592557e-12, 1.550899e-12, 8.638044e-13,
      5.303202e-13, 3.101919e-13, 1.890938e-13, 1.040304e-13, 5.754261e-14,
      2.231535e-14, 8.515226e-15, 4.092401e-15, 2.522252e-15, 1.861298e-15,
      1.521046e-15, 1.321675e-15, 1.180874e-15, 1.08081e-15,  9.977226e-16,
      9.347634e-16, 8.837363e-16, 8.43793e-16,  8.10619e-16,  7.836442e-16,
      7.602779e-16, 7.405002e-16, 7.234758e-16, 7.074465e-16, 6.945049e-16,
      6.796744e-16};
  constexpr std::array<double, N> O3 = {
      2.871244e-08, 2.871244e-08, 3.152583e-08, 3.344605e-08, 3.507263e-08,
      3.562924e-08, 3.770087e-08, 3.992382e-08, 4.225223e-08, 4.476203e-08,
      5.004186e-08, 5.599453e-08, 6.617659e-08, 7.819572e-08, 9.2962e-08,
      1.050884e-07, 1.256883e-07, 1.445019e-07, 2.50159e-07,  5.002621e-07,
      9.505423e-07, 1.400687e-06, 1.801239e-06, 2.400812e-06, 3.402735e-06,
      4.303675e-06, 5.403642e-06, 7.806139e-06, 9.309249e-06, 9.857328e-06,
      9.705826e-06, 8.811167e-06, 7.504933e-06, 5.90465e-06,  4.502284e-06,
      3.452816e-06, 2.802357e-06, 1.801634e-06, 1.100711e-06, 6.503439e-07,
      3.001508e-07, 1.801419e-07, 3.303076e-07, 5.004364e-07, 5.203104e-07,
      4.989688e-07};
  constexpr std::array<double, N> ClO = {
      1.000789e-14, 1.000789e-14, 1.00077e-14,  1.000717e-14, 1.000901e-14,
      1.000543e-14, 1.000772e-14, 1.000869e-14, 1.000451e-14, 1.011168e-14,
      1.05093e-14,  1.210507e-14, 1.871466e-14, 3.181457e-14, 5.613608e-14,
      9.998849e-14, 1.781454e-13, 3.163507e-13, 5.65477e-13,  1.040879e-12,
      2.041019e-12, 4.643029e-12, 8.157699e-12, 1.07073e-11,  1.521172e-11,
      2.241624e-11, 3.972741e-11, 8.485243e-11, 1.851597e-10, 3.572752e-10,
      5.083951e-10, 6.076806e-10, 5.953814e-10, 4.333658e-10, 2.510977e-10,
      1.561469e-10, 1.041e-10,    7.697019e-11, 6.304815e-11, 5.523211e-11,
      5.042638e-11, 4.72377e-11,  4.493019e-11, 4.303587e-11, 4.163051e-11,
      4.023466e-11};
  constexpr std::array<double, N> z = {
      -728.2161, 0.0,     1000.0,  2000.0,  3000.0,  4000.0,  5000.0,  6000.0,
      7000.0,    8000.0,  9000.0,  10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
      15000.0,   16000.0, 17000.0, 18000.0, 19000.0, 20000.0, 21000.0, 22000.0,
      23000.0,   24000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0,
      40000.0,   42500.0, 45000.0, 47500.0, 50000.0, 55000.0, 60000.0, 65000.0,
      70000.0,   75000.0, 80000.0, 85000.0, 90000.0, 95000.0};
  constexpr std::array<double, N> HBr = {
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          7.146775e-12, 7.15629e-12,  7.154327e-12, 7.15513e-12,
      7.154637e-12, 7.155311e-12, 7.155892e-12, 7.157825e-12, 7.155333e-12,
      7.136028e-12};
  constexpr std::array<double, N> H2O2 = {
      2.001579e-10, 2.001579e-10, 1.9513e-10,   1.921495e-10, 1.891687e-10,
      1.840975e-10, 1.771213e-10, 1.661458e-10, 1.49082e-10,  1.231504e-10,
      9.096475e-11, 5.795102e-11, 3.432951e-11, 1.950907e-11, 1.080743e-11,
      6.59455e-12,  4.203814e-12, 2.942968e-12, 2.30152e-12,  2.241786e-12,
      2.681437e-12, 3.682298e-12, 5.623721e-12, 1.030162e-11, 1.971446e-11,
      3.702411e-11, 6.204137e-11, 1.030745e-10, 1.36129e-10,  1.36092e-10,
      1.131134e-10, 8.52122e-11,  6.374651e-11, 5.173691e-11, 4.442499e-11,
      3.802591e-11, 3.482961e-11, 3.623206e-11, 5.253525e-11, 1.260832e-10,
      3.771687e-10, 1.120931e-09, 2.00133e-09,  1.681644e-09, 4.31366e-10,
      4.971248e-11};
  constexpr std::array<double, N> H2O = {
      0.02595108,   0.02595108,   0.01950403,   0.01535123,   0.008606544,
      0.004443232,  0.003348814,  0.002103083,  0.00128958,   0.0007645933,
      0.000410149,  0.0001913013, 7.310937e-05, 2.907518e-05, 9.906947e-06,
      6.224153e-06, 4.003531e-06, 3.001779e-06, 2.902016e-06, 2.752485e-06,
      2.601595e-06, 2.601854e-06, 2.651555e-06, 2.801431e-06, 2.901955e-06,
      3.202031e-06, 3.251939e-06, 3.60174e-06,  4.00395e-06,  4.30271e-06,
      4.603415e-06, 4.905742e-06, 5.204125e-06, 5.504169e-06, 5.704886e-06,
      5.904445e-06, 6.006611e-06, 6.005445e-06, 6.003611e-06, 5.404722e-06,
      4.502263e-06, 3.302781e-06, 2.101304e-06, 1.300968e-06, 8.506549e-07,
      5.387978e-07};
  constexpr std::array<double, N> CO = {
      1.501184e-07, 1.501184e-07, 1.451139e-07, 1.399918e-07, 1.350422e-07,
      1.31291e-07,  1.303875e-07, 1.289368e-07, 1.247689e-07, 1.186706e-07,
      1.094889e-07, 9.970093e-08, 8.970175e-08, 7.819572e-08, 6.3791e-08,
      5.029205e-08, 3.943872e-08, 3.070391e-08, 2.490682e-08, 1.967651e-08,
      1.549779e-08, 1.331992e-08, 1.232746e-08, 1.232282e-08, 1.30802e-08,
      1.401267e-08, 1.522488e-08, 1.723182e-08, 1.996717e-08, 2.267686e-08,
      2.488831e-08, 2.740805e-08, 3.099939e-08, 3.513161e-08, 3.989511e-08,
      4.486094e-08, 5.097974e-08, 5.990292e-08, 6.964247e-08, 9.193682e-08,
      1.938995e-07, 5.691457e-07, 1.549941e-06, 3.852332e-06, 6.594103e-06,
      1.041823e-05};
  constexpr std::array<double, N> NO2 = {
      2.301816e-11, 2.301816e-11, 2.301637e-11, 2.301452e-11, 2.302018e-11,
      2.30137e-11,  2.301976e-11, 2.302074e-11, 2.30071e-11,  2.303014e-11,
      2.321656e-11, 2.382113e-11, 2.621339e-11, 3.152469e-11, 4.453023e-11,
      7.486108e-11, 1.711355e-10, 3.192912e-10, 5.192629e-10, 7.716143e-10,
      1.06064e-09,  1.39109e-09,  1.761239e-09, 2.161021e-09, 2.581799e-09,
      3.062812e-09, 3.741989e-09, 4.814171e-09, 6.164978e-09, 7.21484e-09,
      7.283565e-09, 6.266882e-09, 4.03245e-09,  2.171713e-09, 1.150865e-09,
      6.664963e-10, 4.433971e-10, 3.392718e-10, 2.852665e-10, 2.531629e-10,
      2.311057e-10, 2.151844e-10, 2.021279e-10, 1.92172e-10,  1.831458e-10,
      1.756532e-10};
  constexpr std::array<double, N> HI = {
      3.002368e-12, 3.002368e-12, 3.002311e-12, 3.002151e-12, 3.002703e-12,
      3.001629e-12, 3.002316e-12, 3.002608e-12, 3.001354e-12, 3.003335e-12,
      3.002511e-12, 3.00224e-12,  3.002063e-12, 3.00173e-12,  3.002704e-12,
      3.00226e-12,  3.002116e-12, 3.001779e-12, 3.002482e-12, 3.002616e-12,
      3.001646e-12, 3.001906e-12, 3.001864e-12, 3.001378e-12, 3.002111e-12,
      3.002282e-12, 3.002155e-12, 3.002635e-12, 3.002305e-12, 3.002267e-12,
      3.002373e-12, 3.003368e-12, 3.002203e-12, 3.001978e-12, 3.003055e-12,
      3.002603e-12, 3.002432e-12, 3.002723e-12, 3.001805e-12, 3.002623e-12,
      3.001508e-12, 3.001651e-12, 3.001531e-12, 3.002619e-12, 3.002228e-12,
      2.993813e-12};
  constexpr std::array<double, N> CH4 = {
      1.701342e-06, 1.701342e-06, 1.701444e-06, 1.701416e-06, 1.701587e-06,
      1.700802e-06, 1.701112e-06, 1.701404e-06, 1.699453e-06, 1.69869e-06,
      1.69396e-06,  1.686472e-06, 1.675959e-06, 1.662474e-06, 1.646219e-06,
      1.627326e-06, 1.606313e-06, 1.583224e-06, 1.554057e-06, 1.522355e-06,
      1.480863e-06, 1.424933e-06, 1.355778e-06, 1.272851e-06, 1.191599e-06,
      1.118794e-06, 1.05575e-06,  9.877229e-07, 9.143622e-07, 8.304962e-07,
      7.468172e-07, 6.625289e-07, 5.64221e-07,  4.616925e-07, 3.633099e-07,
      2.77541e-07,  2.101659e-07, 1.652494e-07, 1.501634e-07, 1.501042e-07,
      1.500754e-07, 1.501361e-07, 1.500998e-07, 1.501587e-07, 1.400945e-07,
      1.297393e-07};
  constexpr std::array<double, N> N2 = {
      0.7814327, 0.7814327, 0.7814172, 0.7816251, 0.7817657, 0.781221,
      0.7817906, 0.7819061, 0.781387,  0.7818727, 0.7815526, 0.7815665,
      0.781514,  0.7815224, 0.7816249, 0.7815556, 0.7815302, 0.7816877,
      0.7816212, 0.781703,  0.781613,  0.7814149, 0.7812239, 0.7816767,
      0.781559,  0.7816426, 0.7815833, 0.7815028, 0.7815983, 0.7815755,
      0.7815008, 0.7818904, 0.7815387, 0.7815888, 0.7815762, 0.7816971,
      0.7815147, 0.7817447, 0.7815221, 0.7814899, 0.7816428, 0.7815439,
      0.7814652, 0.7819146, 0.7806076, 0.7774029};

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::t_field(ws).value()(j, k, m) = t[j];

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::z_field(ws).value()(j, k, m) = z[j];

  for (std::size_t i = 0; i < nspe; i++) {
    if (Var::abs_species(ws).value()[i].nelem()) {
      if (Species::isOH(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = OH[j];
      } else if (Species::isO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O2[j];
      } else if (Species::isCH3Cl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH3Cl[j];
      } else if (Species::isHF(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HF[j];
      } else if (Species::isC2H6(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H6[j];
      } else if (Species::isNH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NH3[j];
      } else if (Species::isHOCl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HOCl[j];
      } else if (Species::isSF6(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SF6[j];
      } else if (Species::isHCl(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCl[j];
      } else if (Species::isCOF2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = COF2[j];
      } else if (Species::isNO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO[j];
      } else if (Species::isHNO3(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HNO3[j];
      } else if (Species::isSO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SO2[j];
      } else if (Species::isHCN(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCN[j];
      } else if (Species::isPH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = PH3[j];
      } else if (Species::isCO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO2[j];
      } else if (Species::isN2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2O[j];
      } else if (Species::isH2CO(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2CO[j];
      } else if (Species::isC2H2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H2[j];
      } else if (Species::isO3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O3[j];
      } else if (Species::isClO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = ClO[j];
      } else if (Species::isHBr(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HBr[j];
      } else if (Species::isH2O2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O2[j];
      } else if (Species::isH2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O[j];
      } else if (Species::isCO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO[j];
      } else if (Species::isNO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO2[j];
      } else if (Species::isHI(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HI[j];
      } else if (Species::isCH4(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH4[j];
      } else if (Species::isN2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2[j];
      }
    }
  }
  return ws;
}

Workspace& fascod_subarctic_winter(Workspace& ws) {
  constexpr std::size_t N = 46;
  const std::size_t nlat =
      Var::lat_grid(ws).value().nelem() ? Var::lat_grid(ws).value().nelem() : 1;
  const std::size_t nlon =
      Var::lon_grid(ws).value().nelem() ? Var::lon_grid(ws).value().nelem() : 1;
  const std::size_t nspe = Var::abs_species(ws).value().nelem();

  Var::p_grid(ws) = {
      110000.0, 101300.0, 88780.0, 77750.0, 67980.0, 59320.0, 51580.0, 44670.0,
      38530.0,  33080.0,  28290.0, 24180.0, 20670.0, 17660.0, 15100.0, 12910.0,
      11030.0,  9431.0,   8058.0,  6882.0,  5875.0,  5014.0,  4277.0,  3647.0,
      3109.0,   2649.0,   2256.0,  1513.0,  1020.0,  691.0,   470.1,   323.0,
      224.3,    157.0,    111.3,   79.0,    57.19,   29.9,    15.5,    7.9,
      4.0,      2.0,      0.966,   0.45,    0.202,   0.091};

  Var::t_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::z_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::vmr_field(ws) = Tensor4(nspe, N, nlat, nlon, 0.0);

  constexpr std::array<double, N> CO = {
      1.501443e-07, 1.501443e-07, 1.451427e-07, 1.400106e-07, 1.350344e-07,
      1.313342e-07, 1.303875e-07, 1.288691e-07, 1.248653e-07, 1.185919e-07,
      1.095031e-07, 9.968983e-08, 8.970526e-08, 7.819843e-08, 6.379075e-08,
      5.029106e-08, 3.945037e-08, 3.071457e-08, 2.490812e-08, 1.96756e-08,
      1.549759e-08, 1.332449e-08, 1.232903e-08, 1.232965e-08, 1.308307e-08,
      1.400893e-08, 1.522648e-08, 1.723309e-08, 2.03879e-08,  2.487684e-08,
      3.171149e-08, 4.434441e-08, 6.476672e-08, 1.041889e-07, 1.508144e-07,
      2.16438e-07,  3.143826e-07, 4.845634e-07, 7.151848e-07, 1.067536e-06,
      1.516236e-06, 2.167896e-06, 3.062266e-06, 4.568367e-06, 6.888863e-06,
      1.052301e-05};
  constexpr std::array<double, N> HOCl = {
      7.705282e-12, 7.705282e-12, 1.060968e-11, 1.220605e-11, 1.14094e-11,
      9.806827e-12, 8.015413e-12, 6.424641e-12, 5.425493e-12, 4.704086e-12,
      4.412987e-12, 4.343292e-12, 4.654286e-12, 5.012851e-12, 5.223216e-12,
      5.602865e-12, 6.865071e-12, 8.777405e-12, 1.200993e-11, 1.631351e-11,
      2.261032e-11, 3.073068e-11, 4.292405e-11, 5.76405e-11,  7.656471e-11,
      9.926579e-11, 1.310666e-10, 1.841431e-10, 2.451928e-10, 2.961819e-10,
      3.212935e-10, 3.04355e-10,  2.482026e-10, 1.641398e-10, 9.746861e-11,
      4.920857e-11, 2.532213e-11, 1.501548e-11, 1.050875e-11, 8.344056e-12,
      7.112758e-12, 6.333563e-12, 5.78275e-12,  5.375203e-12, 5.058101e-12,
      4.76689e-12};
  constexpr std::array<double, N> z = {
      -619.98, 0.0,     1000.0,  2000.0,  3000.0,  4000.0,  5000.0,  6000.0,
      7000.0,  8000.0,  9000.0,  10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
      15000.0, 16000.0, 17000.0, 18000.0, 19000.0, 20000.0, 21000.0, 22000.0,
      23000.0, 24000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0,
      40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 55000.0, 60000.0, 65000.0,
      70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 95000.0};
  constexpr std::array<double, N> t = {
      257.2, 257.2, 259.1, 255.9, 252.7, 247.7, 240.9, 234.1, 227.3, 220.6,
      217.2, 217.2, 217.2, 217.2, 217.2, 217.2, 217.2, 216.6, 216.0, 215.4,
      214.8, 214.2, 213.6, 213.0, 212.4, 211.8, 211.2, 213.6, 216.0, 218.5,
      222.3, 228.5, 234.7, 240.8, 247.0, 253.2, 259.3, 259.1, 250.9, 248.4,
      245.4, 234.7, 223.9, 213.1, 202.3, 211.0};
  constexpr std::array<double, N> CH3Cl = {
      7.00767e-10,  7.00767e-10,  6.702325e-10, 6.434762e-10, 6.225643e-10,
      6.076658e-10, 6.024779e-10, 6.004242e-10, 6.006243e-10, 5.984842e-10,
      5.943698e-10, 5.8849e-10,   5.794644e-10, 5.663231e-10, 5.483383e-10,
      5.284626e-10, 5.035291e-10, 4.772397e-10, 4.493084e-10, 4.213422e-10,
      3.952137e-10, 3.69358e-10,  3.431855e-10, 3.172324e-10, 2.861862e-10,
      2.481645e-10, 1.911711e-10, 1.100727e-10, 4.724918e-11, 1.791324e-11,
      7.358215e-12, 3.033783e-12, 1.32105e-12,  8.697228e-13, 6.685838e-13,
      5.602342e-13, 4.944858e-13, 4.563271e-13, 4.322398e-13, 4.172896e-13,
      4.051485e-13, 3.963135e-13, 3.891436e-13, 3.834107e-13, 3.785971e-13,
      3.720031e-13};
  constexpr std::array<double, N> HBr = {
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         7.149042e-12, 7.154787e-12, 7.156318e-12, 7.154529e-12,
      7.15257e-12, 7.15503e-12,  7.155634e-12, 7.159528e-12, 7.161265e-12,
      7.132727e-12};
  constexpr std::array<double, N> SO2 = {
      3.002536e-10, 3.002536e-10, 2.74248e-10,  2.361685e-10, 1.901567e-10,
      1.461511e-10, 1.18071e-10,  9.71764e-11,  8.308066e-11, 7.215878e-11,
      6.564888e-11, 6.084577e-11, 5.794644e-11, 5.603797e-11, 5.5946e-11,
      5.644678e-11, 5.755784e-11, 5.755415e-11, 5.373935e-11, 4.783855e-11,
      3.97233e-11,  3.192806e-11, 2.671289e-11, 2.281267e-11, 2.071407e-11,
      1.900975e-11, 1.751433e-11, 1.541056e-11, 1.341163e-11, 1.210661e-11,
      1.160861e-11, 1.211169e-11, 1.361069e-11, 1.651351e-11, 2.101657e-11,
      2.771522e-11, 3.563253e-11, 4.593182e-11, 5.1538e-11,   5.114099e-11,
      4.321697e-11, 2.8322e-11,   1.330961e-11, 5.56547e-12,  2.244204e-12,
      8.938318e-13};
  constexpr std::array<double, N> H2O = {
      0.001406091,  0.001406091,  0.001616637,  0.001427826,  0.001167116,
      0.0007904268, 0.0004312718, 0.0002370438, 0.0001471831, 3.3865e-05,
      2.97768e-05,  2.001734e-05, 1.000787e-05, 6.004553e-06, 4.452642e-06,
      4.504128e-06, 4.554057e-06, 4.604332e-06, 4.652229e-06, 4.706068e-06,
      4.752762e-06, 4.804839e-06, 4.852314e-06, 4.903635e-06, 4.954021e-06,
      5.004135e-06, 5.003539e-06, 5.003657e-06, 5.002682e-06, 5.003309e-06,
      5.0045e-06,   5.005839e-06, 5.003059e-06, 5.00403e-06,  5.003654e-06,
      5.004936e-06, 4.954875e-06, 4.854009e-06, 4.503429e-06, 4.002716e-06,
      3.300991e-06, 2.702579e-06, 2.001401e-06, 1.331214e-06, 8.513595e-07,
      5.387962e-07};
  constexpr std::array<double, N> H2CO = {
      2.402029e-09, 2.402029e-09, 1.071042e-09, 4.04263e-10,  2.271615e-10,
      1.400975e-10, 1.000798e-10, 7.445608e-11, 6.046154e-11, 5.014377e-11,
      4.223238e-11, 3.632639e-11, 3.432681e-11, 3.392844e-11, 3.503328e-11,
      3.621421e-11, 3.624214e-11, 3.583261e-11, 3.502681e-11, 3.423027e-11,
      3.391801e-11, 3.433461e-11, 3.682159e-11, 4.032738e-11, 4.504084e-11,
      5.063748e-11, 5.824321e-11, 7.216026e-11, 8.73642e-11,  1.010703e-10,
      1.111241e-10, 1.131075e-10, 1.030806e-10, 7.956047e-11, 4.822873e-11,
      1.630698e-11, 5.105117e-12, 2.001665e-12, 1.050875e-12, 6.863659e-13,
      5.141651e-13, 4.162426e-13, 3.533014e-13, 3.093308e-13, 2.764118e-13,
      2.493893e-13};
  constexpr std::array<double, N> HCl = {
      1.000845e-09, 1.000845e-09, 7.498907e-10, 5.612239e-10, 4.22348e-10,
      3.19284e-10,  2.391727e-10, 1.791577e-10, 1.321145e-10, 9.971668e-11,
      7.485011e-11, 5.683982e-11, 4.59335e-11,  4.362471e-11, 6.514124e-11,
      1.010699e-10, 1.631304e-10, 2.371929e-10, 3.132575e-10, 3.853445e-10,
      4.422113e-10, 4.894495e-10, 5.222598e-10, 5.49391e-10,  5.754852e-10,
      6.044042e-10, 6.514554e-10, 7.516206e-10, 9.888411e-10, 1.280952e-09,
      1.571537e-09, 1.691729e-09, 1.740885e-09, 1.761469e-09, 1.791265e-09,
      1.801069e-09, 1.801659e-09, 1.801858e-09, 1.801372e-09, 1.801222e-09,
      1.800848e-09, 1.80172e-09,  1.801389e-09, 1.801978e-09, 1.803107e-09,
      1.795667e-09};
  constexpr std::array<double, N> NH3 = {
      5.005979e-10, 5.005979e-10, 5.004644e-10, 4.63521e-10,  3.803134e-10,
      2.882665e-10, 2.041577e-10, 1.460902e-10, 9.888227e-11, 6.485727e-11,
      3.772717e-11, 2.0315e-11,   1.090884e-11, 6.30512e-12,  3.122013e-12,
      1.110817e-12, 4.472492e-13, 2.111587e-13, 1.100694e-13, 6.706904e-14,
      3.97233e-14,  2.412447e-14, 1.921067e-14, 1.721635e-14, 1.591286e-14,
      1.440635e-14, 1.230915e-14, 9.377714e-15, 6.356418e-15, 3.682628e-15,
      1.821599e-15, 9.270325e-16, 2.942891e-16, 8.726875e-17, 2.982276e-17,
      1.300575e-17, 7.136522e-18, 4.803758e-18, 3.663087e-18, 3.002037e-18,
      2.570825e-18, 2.271593e-18, 2.041404e-18, 1.85167e-18,  1.713228e-18,
      1.585975e-18};
  constexpr std::array<double, N> NO2 = {
      2.302119e-11, 2.302119e-11, 2.302056e-11, 2.3017e-11,   2.301897e-11,
      2.302096e-11, 2.302094e-11, 2.301699e-11, 2.302637e-11, 2.301862e-11,
      2.321509e-11, 2.381245e-11, 2.621663e-11, 3.151711e-11, 4.452642e-11,
      7.484424e-11, 1.71151e-10,  3.193225e-10, 5.192583e-10, 7.718125e-10,
      1.0606e-09,   1.391433e-09, 1.761093e-09, 2.161922e-09, 2.581713e-09,
      3.062314e-09, 3.743283e-09, 4.812633e-09, 6.166369e-09, 7.216815e-09,
      7.286395e-09, 6.266822e-09, 4.033653e-09, 2.172719e-09, 1.150871e-09,
      6.664398e-10, 4.43466e-10,  3.391944e-10, 2.851799e-10, 2.53187e-10,
      2.310778e-10, 2.151694e-10, 2.021562e-10, 1.922284e-10, 1.833527e-10,
      1.75565e-10};
  constexpr std::array<double, N> HF = {
      1.000845e-14, 1.000845e-14, 1.000929e-14, 1.230603e-14, 1.971368e-14,
      3.182462e-14, 5.634649e-14, 9.189428e-14, 1.531291e-13, 2.412352e-13,
      4.043029e-13, 6.574469e-13, 1.201003e-12, 1.961329e-12, 3.122013e-12,
      4.622596e-12, 7.096172e-12, 1.050879e-11, 1.691383e-11, 2.572132e-11,
      4.022306e-11, 5.775716e-11, 7.771149e-11, 9.910488e-11, 1.230959e-10,
      1.501351e-10, 1.821231e-10, 2.302033e-10, 2.832319e-10, 3.201943e-10,
      3.483236e-10, 3.724344e-10, 3.952749e-10, 4.104024e-10, 4.21312e-10,
      4.242469e-10, 4.254369e-10, 4.253389e-10, 4.253115e-10, 4.252777e-10,
      4.251391e-10, 4.25316e-10,  4.253058e-10, 4.254525e-10, 4.257489e-10,
      4.238658e-10};
  constexpr std::array<double, N> CO2 = {
      0.0003554666, 0.0003554666, 0.0003553217, 0.0003552297, 0.0003552671,
      0.0003553173, 0.0003553092, 0.0003552763, 0.0003553734, 0.0003553155,
      0.0003552226, 0.0003552024, 0.00035531,   0.0003552467, 0.0003552978,
      0.0003551733, 0.0003553524, 0.0003551551, 0.0003552645, 0.0003553103,
      0.0003551825, 0.0003553198, 0.0003551836, 0.0003552938, 0.0003553274,
      0.0003552461, 0.0003551983, 0.0003553434, 0.000355246,  0.0003552524,
      0.0003553097, 0.000355439,  0.0003552562, 0.0003553433, 0.0003551277,
      0.0003552133, 0.0003553237, 0.0003552268, 0.0003553574, 0.0003552519,
      0.000355172,  0.0003551591, 0.0003529814, 0.0003445727, 0.0003340725,
      0.000289759};
  constexpr std::array<double, N> ClO = {
      1.000845e-14, 1.000845e-14, 1.000929e-14, 1.00066e-14,  1.000825e-14,
      1.000861e-14, 1.000798e-14, 1.000707e-14, 1.00104e-14,  1.010978e-14,
      1.050721e-14, 1.210838e-14, 1.87158e-14,  3.182277e-14, 5.61446e-14,
      9.997816e-14, 1.781384e-13, 3.162466e-13, 5.655216e-13, 1.041039e-12,
      2.040936e-12, 4.644403e-12, 8.157293e-12, 1.070881e-11, 1.521484e-11,
      2.242091e-11, 3.973361e-11, 8.486919e-11, 1.851665e-10, 3.572171e-10,
      5.084807e-10, 6.077333e-10, 5.955128e-10, 4.332732e-10, 2.511939e-10,
      1.560779e-10, 1.041056e-10, 7.695584e-11, 6.304801e-11, 5.522185e-11,
      5.041698e-11, 4.723033e-11, 4.493072e-11, 4.304217e-11, 4.16761e-11,
      4.020963e-11};
  constexpr std::array<double, N> NO = {
      3.002536e-10, 3.002536e-10, 3.002786e-10, 3.00198e-10,  3.002474e-10,
      3.002584e-10, 3.002395e-10, 3.002121e-10, 3.003121e-10, 3.002549e-10,
      3.002061e-10, 3.002601e-10, 3.001782e-10, 3.002276e-10, 2.992922e-10,
      2.952422e-10, 2.833031e-10, 2.682055e-10, 2.5219e-10,   2.401867e-10,
      2.441249e-10, 2.552239e-10, 2.771273e-10, 3.072332e-10, 3.603267e-10,
      4.512884e-10, 6.8545e-10,   1.28103e-09,  2.451928e-09, 4.531793e-09,
      7.149286e-09, 9.351396e-09, 1.120812e-08, 1.190972e-08, 1.170788e-08,
      1.100555e-08, 1.03104e-08,  1.010763e-08, 1.010869e-08, 1.030634e-08,
      1.150307e-08, 1.611016e-08, 2.681762e-08, 7.015683e-08, 2.133584e-07,
      7.103914e-07};
  constexpr std::array<double, N> HNO3 = {
      5.005979e-11, 5.005979e-11, 5.963666e-11, 6.934637e-11, 7.914214e-11,
      8.878608e-11, 9.756493e-11, 1.110691e-10, 1.261686e-10, 1.391246e-10,
      1.530712e-10, 1.741285e-10, 2.021016e-10, 2.411331e-10, 2.762545e-10,
      3.33338e-10,  4.52415e-10,  7.37581e-10,  1.310915e-09, 2.111897e-09,
      3.171705e-09, 4.203792e-09, 4.942644e-09, 5.464074e-09, 5.744476e-09,
      5.844229e-09, 5.613632e-09, 4.824328e-09, 3.742509e-09, 2.591592e-09,
      1.641398e-09, 9.691304e-10, 5.3339e-10,   2.522133e-10, 1.210927e-10,
      7.704327e-11, 5.555219e-11, 4.453197e-11, 3.844118e-11, 3.492174e-11,
      3.271344e-11, 3.122225e-11, 3.012022e-11, 2.92331e-11,  2.844318e-11,
      2.773056e-11};
  constexpr std::array<double, N> O2 = {
      0.2091784, 0.2091784, 0.2092119, 0.2091298, 0.2091467, 0.2091662,
      0.2091875, 0.2091138, 0.2092492, 0.2091933, 0.2091478, 0.2091031,
      0.2092107, 0.2092084, 0.2091272, 0.2091551, 0.2091604, 0.209161,
      0.2091467, 0.2091586, 0.2090912, 0.2092164, 0.2091384, 0.2091766,
      0.2091216, 0.2091956, 0.2091379, 0.2091517, 0.2091712, 0.2091261,
      0.2091901, 0.2092197, 0.2091952, 0.2091612, 0.2091546, 0.2090922,
      0.2092128, 0.2091399, 0.2091692, 0.2091224, 0.2090543, 0.2091745,
      0.2091327, 0.2002052, 0.1902665, 0.1795667};
  constexpr std::array<double, N> O3 = {
      1.803625e-08, 1.803625e-08, 2.073986e-08, 2.3376e-08,   2.769462e-08,
      3.255682e-08, 3.803936e-08, 4.449275e-08, 7.259783e-08, 1.040442e-07,
      2.101018e-07, 3.002601e-07, 3.502321e-07, 4.002469e-07, 6.504194e-07,
      9.005932e-07, 1.200912e-06, 1.501165e-06, 1.901603e-06, 2.451996e-06,
      3.101537e-06, 3.703607e-06, 4.002107e-06, 4.202886e-06, 4.503141e-06,
      4.603407e-06, 4.703663e-06, 4.904246e-06, 5.403248e-06, 5.902682e-06,
      6.205841e-06, 6.257055e-06, 5.904563e-06, 5.10356e-06,  4.102813e-06,
      3.001634e-06, 2.602326e-06, 1.600854e-06, 9.507488e-07, 6.503328e-07,
      5.001886e-07, 3.302072e-07, 1.300879e-07, 7.506062e-07, 8.013039e-07,
      7.981098e-07};
  constexpr std::array<double, N> N2O = {
      3.202705e-07, 3.202705e-07, 3.203053e-07, 3.20193e-07,  3.202639e-07,
      3.202641e-07, 3.202296e-07, 3.202552e-07, 3.203492e-07, 3.197747e-07,
      3.165308e-07, 3.098099e-07, 2.991626e-07, 2.937748e-07, 2.861845e-07,
      2.801433e-07, 2.726996e-07, 2.612927e-07, 2.422712e-07, 2.175854e-07,
      1.844062e-07, 1.622651e-07, 1.362537e-07, 1.230546e-07, 1.122484e-07,
      1.04377e-07,  9.576653e-08, 8.603873e-08, 7.321284e-08, 5.714949e-08,
      4.674131e-08, 3.44304e-08,  2.473358e-08, 1.632292e-08, 1.066915e-08,
      7.067094e-09, 3.975794e-09, 2.510158e-09, 1.727395e-09, 1.260725e-09,
      9.605654e-10, 7.558473e-10, 6.10277e-10,  5.029323e-10, 4.217389e-10,
      3.569565e-10};
  constexpr std::array<double, N> HI = {
      3.002536e-12, 3.002536e-12, 3.002786e-12, 3.00198e-12,  3.002474e-12,
      3.002584e-12, 3.002395e-12, 3.002121e-12, 3.003121e-12, 3.002549e-12,
      3.002061e-12, 3.002601e-12, 3.001782e-12, 3.002276e-12, 3.002852e-12,
      3.001203e-12, 3.001599e-12, 3.002329e-12, 3.002298e-12, 3.002549e-12,
      3.001585e-12, 3.002877e-12, 3.00158e-12,  3.002176e-12, 3.002408e-12,
      3.002702e-12, 3.002641e-12, 3.001804e-12, 3.002779e-12, 3.001985e-12,
      3.0027e-12,   3.003503e-12, 3.002124e-12, 3.002841e-12, 3.002193e-12,
      3.001634e-12, 3.002973e-12, 3.0019e-12,   3.001541e-12, 3.002037e-12,
      3.001132e-12, 3.002326e-12, 3.002102e-12, 3.003079e-12, 3.004717e-12,
      2.992672e-12};
  constexpr std::array<double, N> CH4 = {
      1.701612e-06, 1.701612e-06, 1.70166e-06,  1.70094e-06,  1.701402e-06,
      1.698466e-06, 1.688202e-06, 1.67291e-06,  1.651024e-06, 1.630639e-06,
      1.616576e-06, 1.580055e-06, 1.543691e-06, 1.507082e-06, 1.472033e-06,
      1.435095e-06, 1.390143e-06, 1.34293e-06,  1.290929e-06, 1.231184e-06,
      1.161562e-06, 1.085306e-06, 1.014318e-06, 9.571806e-07, 9.016658e-07,
      8.484841e-07, 7.96611e-07,  7.453831e-07, 6.947033e-07, 6.439687e-07,
      5.88853e-07,  5.244166e-07, 4.508965e-07, 3.71014e-07,  3.006176e-07,
      2.454233e-07, 1.98195e-07,  1.591282e-07, 1.501218e-07, 1.501235e-07,
      1.500989e-07, 1.501001e-07, 1.501211e-07, 1.501866e-07, 1.402109e-07,
      1.296888e-07};
  constexpr std::array<double, N> N2 = {
      0.7817461, 0.7817461, 0.7817238, 0.7816236, 0.7816698, 0.7817788,
      0.7815512, 0.7814632, 0.7817727, 0.7816204, 0.7815746, 0.7815941,
      0.781566,  0.7814749, 0.7814963, 0.7816601, 0.7816665, 0.7816583,
      0.7816633, 0.7817519, 0.7814419, 0.7815384, 0.7812522, 0.7815496,
      0.7815883, 0.7815857, 0.7816172, 0.7816386, 0.7815412, 0.7814942,
      0.7815247, 0.7818876, 0.7815925, 0.7816282, 0.7816486, 0.7814958,
      0.7818873, 0.7815229, 0.7815629, 0.7814412, 0.7813276, 0.7814473,
      0.7814873, 0.7819904, 0.7812541, 0.7769806};
  constexpr std::array<double, N> OH = {
      4.403018e-14, 4.403018e-14, 4.404248e-14, 4.402995e-14, 4.403629e-14,
      4.403559e-14, 4.403641e-14, 4.402966e-14, 4.414678e-14, 4.453643e-14,
      4.563514e-14, 4.683115e-14, 4.803722e-14, 4.943228e-14, 5.193425e-14,
      5.653969e-14, 6.756317e-14, 8.257356e-14, 1.040737e-13, 1.301191e-13,
      1.640624e-13, 2.162355e-13, 3.401515e-13, 5.093943e-13, 7.596102e-13,
      1.161339e-12, 2.181859e-12, 5.003657e-12, 1.170996e-11, 3.402338e-11,
      8.357156e-11, 1.702474e-10, 2.851874e-10, 4.063789e-10, 5.113961e-10,
      5.792627e-10, 6.754655e-10, 9.536925e-10, 1.761366e-09, 3.742669e-09,
      7.192382e-09, 1.120728e-08, 1.130949e-08, 6.106195e-09, 1.512729e-09,
      2.414178e-10};
  constexpr std::array<double, N> HCN = {
      1.701262e-10, 1.701262e-10, 1.651694e-10, 1.630958e-10, 1.611584e-10,
      1.601609e-10, 1.601148e-10, 1.601276e-10, 1.601339e-10, 1.601175e-10,
      1.600675e-10, 1.601139e-10, 1.601724e-10, 1.601158e-10, 1.591194e-10,
      1.571218e-10, 1.55137e-10,  1.521142e-10, 1.491156e-10, 1.451146e-10,
      1.410937e-10, 1.371379e-10, 1.340471e-10, 1.300701e-10, 1.250768e-10,
      1.191145e-10, 1.13074e-10,  1.050826e-10, 9.739295e-11, 9.046123e-11,
      8.468149e-11, 8.028877e-11, 7.635336e-11, 7.305926e-11, 7.004503e-11,
      6.704225e-11, 6.43539e-11,  6.214376e-11, 6.025432e-11, 5.882516e-11,
      5.752381e-11, 5.623893e-11, 5.504333e-11, 5.375203e-11, 5.2586e-11,
      5.106238e-11};

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::t_field(ws).value()(j, k, m) = t[j];

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::z_field(ws).value()(j, k, m) = z[j];

  for (std::size_t i = 0; i < nspe; i++) {
    if (Var::abs_species(ws).value()[i].nelem()) {
      if (Species::isCO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO[j];
      } else if (Species::isHOCl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HOCl[j];
      } else if (Species::isCH3Cl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH3Cl[j];
      } else if (Species::isHBr(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HBr[j];
      } else if (Species::isSO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SO2[j];
      } else if (Species::isH2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O[j];
      } else if (Species::isH2CO(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2CO[j];
      } else if (Species::isHCl(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCl[j];
      } else if (Species::isNH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NH3[j];
      } else if (Species::isNO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO2[j];
      } else if (Species::isHF(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HF[j];
      } else if (Species::isCO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO2[j];
      } else if (Species::isClO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = ClO[j];
      } else if (Species::isNO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO[j];
      } else if (Species::isHNO3(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HNO3[j];
      } else if (Species::isO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O2[j];
      } else if (Species::isO3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O3[j];
      } else if (Species::isN2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2O[j];
      } else if (Species::isHI(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HI[j];
      } else if (Species::isCH4(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH4[j];
      } else if (Species::isN2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2[j];
      } else if (Species::isOH(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = OH[j];
      } else if (Species::isHCN(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCN[j];
      }
    }
  }
  return ws;
}

Workspace& fascod_midlatitude_summer(Workspace& ws) {
  constexpr std::size_t N = 46;
  const std::size_t nlat =
      Var::lat_grid(ws).value().nelem() ? Var::lat_grid(ws).value().nelem() : 1;
  const std::size_t nlon =
      Var::lon_grid(ws).value().nelem() ? Var::lon_grid(ws).value().nelem() : 1;
  const std::size_t nspe = Var::abs_species(ws).value().nelem();

  Var::p_grid(ws) = {
      110000.0, 101300.0, 90200.0, 80200.0, 71000.0, 62800.0, 55400.0, 48700.0,
      42600.0,  37200.0,  32400.0, 28100.0, 24300.0, 20900.0, 17900.0, 15300.0,
      13000.0,  11100.0,  9500.0,  8120.0,  6950.0,  5950.0,  5100.0,  4370.0,
      3760.0,   3220.0,   2770.0,  1907.0,  1320.0,  930.0,   652.0,   464.0,
      333.0,    241.0,    176.0,   129.0,   95.1,    51.5,    27.2,    13.9,
      6.7,      3.0,      1.2,     0.448,   0.164,   0.062};

  Var::t_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::z_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::vmr_field(ws) = Tensor4(nspe, N, nlat, nlon, 0.0);

  constexpr std::array<double, N> HCl = {
      1.000869e-09, 1.000869e-09, 7.494247e-10, 5.612039e-10, 4.222489e-10,
      3.192447e-10, 2.392006e-10, 1.790605e-10, 1.320805e-10, 9.967481e-11,
      7.485932e-11, 5.684799e-11, 4.59296e-11,  4.3631e-11,   6.515062e-11,
      1.010631e-10, 1.631121e-10, 2.371804e-10, 3.132094e-10, 3.852289e-10,
      4.424077e-10, 4.892748e-10, 5.223328e-10, 5.492633e-10, 5.753148e-10,
      6.042606e-10, 6.514365e-10, 7.51585e-10,  9.887867e-10, 1.280918e-09,
      1.570716e-09, 1.690731e-09, 1.741351e-09, 1.761534e-09, 1.791265e-09,
      1.801464e-09, 1.801226e-09, 1.801354e-09, 1.800991e-09, 1.801342e-09,
      1.80184e-09,  1.801425e-09, 1.801447e-09, 1.801749e-09, 1.801687e-09,
      1.816164e-09};
  constexpr std::array<double, N> z = {
      -709.17, 0.0,     1000.0,  2000.0,  3000.0,  4000.0,  5000.0,  6000.0,
      7000.0,  8000.0,  9000.0,  10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
      15000.0, 16000.0, 17000.0, 18000.0, 19000.0, 20000.0, 21000.0, 22000.0,
      23000.0, 24000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0,
      40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 55000.0, 60000.0, 65000.0,
      70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 95000.0};
  constexpr std::array<double, N> H2CO = {
      2.401925e-09, 2.401925e-09, 1.070923e-09, 4.042829e-10, 2.271685e-10,
      1.400712e-10, 1.000887e-10, 7.442342e-11, 6.042682e-11, 5.012298e-11,
      4.222939e-11, 3.63263e-11,  3.432045e-11, 3.39238e-11,  3.50222e-11,
      3.622467e-11, 3.621913e-11, 3.581853e-11, 3.501701e-11, 3.422823e-11,
      3.392946e-11, 3.431892e-11, 3.682106e-11, 4.032132e-11, 4.503033e-11,
      5.062387e-11, 5.824331e-11, 7.214819e-11, 8.736524e-11, 1.010542e-10,
      1.110665e-10, 1.130643e-10, 1.030717e-10, 7.955606e-11, 4.823289e-11,
      1.631509e-11, 5.103472e-12, 2.001344e-12, 1.050709e-12, 6.863845e-13,
      5.146188e-13, 4.163314e-13, 3.533584e-13, 3.092638e-13, 2.761568e-13,
      2.522142e-13};
  constexpr std::array<double, N> CH4 = {
      1.701397e-06, 1.701397e-06, 1.701504e-06, 1.701288e-06, 1.701049e-06,
      1.698033e-06, 1.688789e-06, 1.672861e-06, 1.650181e-06, 1.629619e-06,
      1.616047e-06, 1.58046e-06,  1.54312e-06,  1.509682e-06, 1.480121e-06,
      1.452101e-06, 1.422878e-06, 1.391154e-06, 1.356792e-06, 1.324155e-06,
      1.282203e-06, 1.22484e-06,  1.154574e-06, 1.06632e-06,  9.735844e-07,
      8.803733e-07, 7.89331e-07,  7.051072e-07, 6.318946e-07, 5.595591e-07,
      5.010713e-07, 4.455273e-07, 3.918306e-07, 3.391632e-07, 2.875341e-07,
      2.386144e-07, 1.945324e-07, 1.575372e-07, 1.500826e-07, 1.501079e-07,
      1.501608e-07, 1.501789e-07, 1.501172e-07, 1.501542e-07, 1.401621e-07,
      1.311498e-07};
  constexpr std::array<double, N> H2O = {
      0.01877431,   0.01877431,   0.01379119,   0.009687274,  0.005988691,
      0.003815319,  0.002226857,  0.001510684,  0.001020322,  0.0006466887,
      0.00041323,   0.0002474165, 9.562926e-05, 2.945937e-05, 8.006502e-06,
      5.004493e-06, 3.401986e-06, 3.302817e-06, 3.200749e-06, 3.15261e-06,
      3.202477e-06, 3.301676e-06, 3.452385e-06, 3.601543e-06, 3.852613e-06,
      4.001522e-06, 4.203033e-06, 4.452612e-06, 4.703154e-06, 4.854007e-06,
      4.953077e-06, 5.002648e-06, 5.103407e-06, 5.304241e-06, 5.454255e-06,
      5.505127e-06, 5.503745e-06, 5.353522e-06, 5.003623e-06, 4.402591e-06,
      3.703458e-06, 2.953037e-06, 2.101321e-06, 1.331086e-06, 8.505575e-07,
      5.447699e-07};
  constexpr std::array<double, N> COF2 = {
      1.000869e-20, 1.000869e-20, 1.000859e-20, 1.000642e-20, 1.000649e-20,
      1.00068e-20,  1.000887e-20, 1.000458e-20, 1.00051e-20,  1.000433e-20,
      1.000734e-20, 1.000765e-20, 1.000753e-20, 1.000679e-20, 1.00073e-20,
      1.000704e-20, 1.000665e-20, 1.000772e-20, 1.000665e-20, 1.000858e-20,
      1.000828e-20, 1.000523e-20, 1.000631e-20, 1.000506e-20, 1.000583e-20,
      1.000381e-20, 1.000717e-20, 1.00068e-20,  1.000765e-20, 1.000607e-20,
      1.000585e-20, 1.00053e-20,  1.000716e-20, 1.00072e-20,  1.000652e-20,
      1.000879e-20, 1.000681e-20, 1.000672e-20, 1.000725e-20, 1.000719e-20,
      1.000922e-20, 1.000892e-20, 1.000782e-20, 1.000859e-20, 1.000721e-20,
      1.008936e-20};
  constexpr std::array<double, N> t = {
      294.2, 294.2, 289.7, 285.2, 279.2, 273.2, 267.2, 261.2,  254.7, 248.2,
      241.7, 235.3, 228.8, 222.3, 215.8, 215.7, 215.7, 215.7,  215.7, 216.8,
      217.9, 219.2, 220.4, 221.6, 222.8, 223.9, 225.1, 228.45, 233.7, 239.0,
      245.2, 251.3, 257.5, 263.7, 269.9, 275.2, 275.7, 269.3,  257.1, 240.1,
      218.1, 196.1, 174.1, 165.1, 165.0, 178.3};
  constexpr std::array<double, N> PH3 = {
      1.000869e-20, 1.000869e-20, 1.000859e-20, 1.000642e-20, 1.000649e-20,
      1.00068e-20,  1.000887e-20, 1.000458e-20, 1.00051e-20,  1.000433e-20,
      1.000734e-20, 1.000765e-20, 1.000753e-20, 1.000679e-20, 1.00073e-20,
      1.000704e-20, 1.000665e-20, 1.000772e-20, 1.000665e-20, 1.000858e-20,
      1.000828e-20, 1.000523e-20, 1.000631e-20, 1.000506e-20, 1.000583e-20,
      1.000381e-20, 1.000717e-20, 1.00068e-20,  1.000765e-20, 1.000607e-20,
      1.000585e-20, 1.00053e-20,  1.000716e-20, 1.00072e-20,  1.000652e-20,
      1.000879e-20, 1.000681e-20, 1.000672e-20, 1.000725e-20, 1.000719e-20,
      1.000922e-20, 1.000892e-20, 1.000782e-20, 1.000859e-20, 1.000721e-20,
      1.008936e-20};
  constexpr std::array<double, N> SO2 = {
      3.002606e-10, 3.002606e-10, 2.742273e-10, 2.361672e-10, 1.901396e-10,
      1.460777e-10, 1.181353e-10, 9.715773e-11, 8.30456e-11,  7.213066e-11,
      6.565125e-11, 6.084828e-11, 5.794176e-11, 5.604035e-11, 5.594564e-11,
      5.644897e-11, 5.754741e-11, 5.755112e-11, 5.373245e-11, 4.784948e-11,
      3.973444e-11, 3.191807e-11, 2.671928e-11, 2.281071e-11, 2.071526e-11,
      1.900915e-11, 1.751451e-11, 1.541047e-11, 1.341034e-11, 1.210663e-11,
      1.160512e-11, 1.210656e-11, 1.361264e-11, 1.651249e-11, 2.101455e-11,
      2.772298e-11, 3.562424e-11, 4.593271e-11, 5.153706e-11, 5.113302e-11,
      4.324147e-11, 2.8321e-11,   1.331104e-11, 5.566545e-12, 2.242038e-12,
      9.041115e-13};
  constexpr std::array<double, N> NO2 = {
      2.302078e-11, 2.302078e-11, 2.301931e-11, 2.30128e-11,  2.301547e-11,
      2.301685e-11, 2.302106e-11, 2.300831e-11, 2.301502e-11, 2.30118e-11,
      2.321587e-11, 2.381673e-11, 2.622135e-11, 3.151536e-11, 4.45268e-11,
      7.484355e-11, 1.711073e-10, 3.192813e-10, 5.194555e-10, 7.715637e-10,
      1.060999e-09, 1.390661e-09, 1.761396e-09, 2.161346e-09, 2.581226e-09,
      3.061625e-09, 3.743011e-09, 4.813188e-09, 6.164945e-09, 7.213593e-09,
      7.285005e-09, 6.263405e-09, 4.032546e-09, 2.170947e-09, 1.150771e-09,
      6.665651e-10, 4.435017e-10, 3.39261e-10,  2.851569e-10, 2.532802e-10,
      2.311964e-10, 2.151602e-10, 2.021194e-10, 1.921832e-10, 1.830859e-10,
      1.775664e-10};
  constexpr std::array<double, N> N2 = {
      0.7815277, 0.7815277, 0.7817963, 0.7816594, 0.7812988, 0.7814437,
      0.7817972, 0.7812607, 0.7814212, 0.7813695, 0.7815527, 0.7815587,
      0.7815703, 0.7815691, 0.7815078, 0.7815263, 0.781426,  0.7815684,
      0.7815345, 0.781517,  0.7817889, 0.7812933, 0.7816495, 0.7813612,
      0.7814856, 0.7812953, 0.7815891, 0.7815227, 0.781496,  0.7813248,
      0.7814635, 0.7814301, 0.781526,  0.7815106, 0.7815083, 0.7817339,
      0.7813316, 0.7811883, 0.7816041, 0.7815434, 0.7815914, 0.7816705,
      0.7816352, 0.7815551, 0.7805459, 0.7857869};
  constexpr std::array<double, N> CH3Cl = {
      7.005279e-10, 7.005279e-10, 6.704912e-10, 6.431996e-10, 6.222158e-10,
      6.072556e-10, 6.025299e-10, 6.002748e-10, 6.003058e-10, 5.982331e-10,
      5.944044e-10, 5.884814e-10, 5.794176e-10, 5.664246e-10, 5.484703e-10,
      5.282845e-10, 5.033107e-10, 4.773121e-10, 4.492334e-10, 4.213556e-10,
      3.953099e-10, 3.691815e-10, 3.432097e-10, 3.171654e-10, 2.861847e-10,
      2.48079e-10,  1.911898e-10, 1.100748e-10, 4.722709e-11, 1.791157e-11,
      7.352507e-12, 3.0315e-12,   1.320693e-12, 8.695873e-13, 6.684426e-13,
      5.605274e-13, 4.943363e-13, 4.562948e-13, 4.323684e-13, 4.173638e-13,
      4.053578e-13, 3.963857e-13, 3.892151e-13, 3.833487e-13, 3.782571e-13,
      3.763359e-13};
  constexpr std::array<double, N> HBr = {
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          0.0,          0.0,          0.0,          0.0,
      0.0,          7.144861e-12, 7.154876e-12, 7.155677e-12, 7.154807e-12,
      7.155224e-12, 7.156062e-12, 7.155307e-12, 7.154079e-12, 7.155351e-12,
      7.214627e-12};
  constexpr std::array<double, N> SF6 = {
      1.000869e-20, 1.000869e-20, 1.000859e-20, 1.000642e-20, 1.000649e-20,
      1.00068e-20,  1.000887e-20, 1.000458e-20, 1.00051e-20,  1.000433e-20,
      1.000734e-20, 1.000765e-20, 1.000753e-20, 1.000679e-20, 1.00073e-20,
      1.000704e-20, 1.000665e-20, 1.000772e-20, 1.000665e-20, 1.000858e-20,
      1.000828e-20, 1.000523e-20, 1.000631e-20, 1.000506e-20, 1.000583e-20,
      1.000381e-20, 1.000717e-20, 1.00068e-20,  1.000765e-20, 1.000607e-20,
      1.000585e-20, 1.00053e-20,  1.000716e-20, 1.00072e-20,  1.000652e-20,
      1.000879e-20, 1.000681e-20, 1.000672e-20, 1.000725e-20, 1.000719e-20,
      1.000922e-20, 1.000892e-20, 1.000782e-20, 1.000859e-20, 1.000721e-20,
      1.008936e-20};
  constexpr std::array<double, N> ClO = {
      1.000869e-14, 1.000869e-14, 1.000859e-14, 1.000642e-14, 1.000649e-14,
      1.00068e-14,  1.000887e-14, 1.000458e-14, 1.00051e-14,  1.010566e-14,
      1.050585e-14, 1.210491e-14, 1.872025e-14, 3.182375e-14, 5.614539e-14,
      9.997308e-14, 1.781175e-13, 3.163299e-13, 5.652253e-13, 1.04104e-12,
      2.041482e-12, 4.64249e-12,  8.156602e-12, 1.070521e-11, 1.520919e-11,
      2.240776e-11, 3.973022e-11, 8.485104e-11, 1.851439e-10, 3.573088e-10,
      5.082888e-10, 6.073469e-10, 5.954331e-10, 4.332829e-10, 2.511159e-10,
      1.561406e-10, 1.040708e-10, 7.696365e-11, 6.304774e-11, 5.523511e-11,
      5.042815e-11, 4.723777e-11, 4.4931e-11,   4.303641e-11, 4.163189e-11,
      4.065921e-11};
  constexpr std::array<double, N> C2H2 = {
      3.002606e-10, 3.002606e-10, 1.72146e-10,  9.574345e-11, 6.743385e-11,
      5.073678e-11, 3.993559e-11, 3.191691e-11, 2.801757e-11, 2.550828e-11,
      2.401925e-11, 2.271839e-11, 2.081327e-11, 1.760807e-11, 1.230937e-11,
      7.324741e-12, 4.522236e-12, 2.592081e-12, 1.551156e-12, 8.637238e-13,
      5.302832e-13, 3.101775e-13, 1.891472e-13, 1.040415e-13, 5.753148e-14,
      2.231175e-14, 8.516023e-15, 4.092036e-15, 2.52269e-15,  1.861057e-15,
      1.520868e-15, 1.320579e-15, 1.18083e-15,  1.08079e-15,  9.976882e-16,
      9.348996e-16, 8.83401e-16,  8.43279e-16,  8.105765e-16, 7.834514e-16,
      7.609168e-16, 7.406962e-16, 7.235434e-16, 7.077755e-16, 6.945595e-16,
      6.869183e-16};
  constexpr std::array<double, N> HI = {
      3.002606e-12, 3.002606e-12, 3.002577e-12, 3.001926e-12, 3.001947e-12,
      3.002041e-12, 3.002661e-12, 3.001374e-12, 3.001529e-12, 3.001299e-12,
      3.002407e-12, 3.002527e-12, 3.00174e-12,  3.001742e-12, 3.002854e-12,
      3.001528e-12, 3.001079e-12, 3.002317e-12, 3.001995e-12, 3.002574e-12,
      3.002485e-12, 3.00157e-12,  3.001892e-12, 3.001519e-12, 3.001749e-12,
      3.001142e-12, 3.002487e-12, 3.00204e-12,  3.001805e-12, 3.00182e-12,
      3.001754e-12, 3.001589e-12, 3.002255e-12, 3.001859e-12, 3.002381e-12,
      3.001458e-12, 3.002043e-12, 3.002016e-12, 3.001652e-12, 3.002634e-12,
      3.002767e-12, 3.002676e-12, 3.002745e-12, 3.002576e-12, 3.001886e-12,
      3.026808e-12};
  constexpr std::array<double, N> O3 = {
      3.019448e-08, 3.019448e-08, 3.340039e-08, 3.696188e-08, 4.22466e-08,
      4.824409e-08, 5.517197e-08, 6.410781e-08, 7.767983e-08, 9.130102e-08,
      1.111354e-07, 1.305296e-07, 1.794024e-07, 2.232215e-07, 3.002854e-07,
      4.40302e-07,  5.003325e-07, 6.004634e-07, 7.003402e-07, 1.000858e-06,
      1.501242e-06, 2.001047e-06, 2.401633e-06, 2.901399e-06, 3.401819e-06,
      4.001522e-06, 4.803306e-06, 6.004079e-06, 7.005841e-06, 8.104204e-06,
      8.905049e-06, 8.704159e-06, 7.555819e-06, 5.904008e-06, 4.503571e-06,
      3.502192e-06, 2.801906e-06, 1.801354e-06, 1.30089e-06,  8.006229e-07,
      4.00369e-07,  1.901605e-07, 2.001563e-07, 5.703927e-07, 7.505409e-07,
      7.063744e-07};
  constexpr std::array<double, N> H2O2 = {
      2.001737e-10, 2.001737e-10, 1.951608e-10, 1.921252e-10, 1.89108e-10,
      1.840988e-10, 1.771363e-10, 1.661012e-10, 1.490858e-10, 1.230735e-10,
      9.096829e-11, 5.794634e-11, 3.432045e-11, 1.95172e-11,  1.080795e-11,
      6.594797e-12, 4.203801e-12, 2.94329e-12,  2.301655e-12, 2.242069e-12,
      2.682151e-12, 3.68215e-12,  5.623699e-12, 1.030613e-11, 1.970895e-11,
      3.701024e-11, 6.204691e-11, 1.030783e-10, 1.361079e-10, 1.360754e-10,
      1.130915e-10, 8.517214e-11, 6.374988e-11, 5.174316e-11, 4.442168e-11,
      3.802632e-11, 3.482369e-11, 3.622201e-11, 5.254196e-11, 1.260916e-10,
      3.773572e-10, 1.120927e-09, 2.001563e-09, 1.681666e-09, 4.313214e-10,
      5.022842e-11};
  constexpr std::array<double, N> HCN = {
      1.701397e-10, 1.701397e-10, 1.651395e-10, 1.631076e-10, 1.61092e-10,
      1.601329e-10, 1.601552e-10, 1.601029e-10, 1.60065e-10,  1.601061e-10,
      1.601627e-10, 1.601271e-10, 1.601621e-10, 1.600733e-10, 1.591147e-10,
      1.571033e-10, 1.550939e-10, 1.521281e-10, 1.490966e-10, 1.451336e-10,
      1.411203e-10, 1.370824e-10, 1.340738e-10, 1.300868e-10, 1.250933e-10,
      1.190472e-10, 1.130982e-10, 1.050797e-10, 9.73631e-11,  9.044491e-11,
      8.463691e-11, 8.023679e-11, 7.635893e-11, 7.305984e-11, 7.004144e-11,
      6.706888e-11, 6.436379e-11, 6.214129e-11, 6.024185e-11, 5.883637e-11,
      5.757439e-11, 5.625392e-11, 5.504699e-11, 5.373191e-11, 5.253648e-11,
      5.165784e-11};
  constexpr std::array<double, N> NO = {
      3.002606e-10, 3.002606e-10, 3.002577e-10, 3.001926e-10, 3.001947e-10,
      3.002041e-10, 3.002661e-10, 3.001374e-10, 3.001529e-10, 3.001299e-10,
      3.002407e-10, 3.002527e-10, 3.00174e-10,  3.001742e-10, 2.992867e-10,
      2.952865e-10, 2.831552e-10, 2.681963e-10, 2.521726e-10, 2.402059e-10,
      2.4419e-10,   2.551411e-10, 2.771574e-10, 3.071534e-10, 3.602262e-10,
      4.511313e-10, 6.855455e-10, 1.28087e-09,  2.4518e-09,   4.531116e-09,
      7.144809e-09, 9.34725e-09,  1.121041e-08, 1.190924e-08, 1.170674e-08,
      1.101025e-08, 1.030701e-08, 1.01078e-08,  1.010774e-08, 1.030769e-08,
      1.151038e-08, 1.610994e-08, 2.682239e-08, 7.016696e-08, 2.130908e-07,
      7.182862e-07};
  constexpr std::array<double, N> HF = {
      1.000869e-14, 1.000869e-14, 1.000859e-14, 1.230917e-14, 1.971436e-14,
      3.182236e-14, 5.635066e-14, 9.182591e-14, 1.530483e-13, 2.410804e-13,
      4.042692e-13, 6.575036e-13, 1.200956e-12, 1.962e-12,    3.122702e-12,
      4.622976e-12, 7.094917e-12, 1.050945e-11, 1.690974e-11, 2.572371e-11,
      4.023226e-11, 5.773229e-11, 7.774727e-11, 9.907044e-11, 1.23048e-10,
      1.500571e-10, 1.821015e-10, 2.302391e-10, 2.833137e-10, 3.201941e-10,
      3.482056e-10, 3.721701e-10, 3.952471e-10, 4.103195e-10, 4.213496e-10,
      4.244456e-10, 4.254895e-10, 4.253216e-10, 4.25321e-10,  4.25234e-10,
      4.254033e-10, 4.253565e-10, 4.252721e-10, 4.253776e-10, 4.253482e-10,
      4.288276e-10};
  constexpr std::array<double, N> N2O = {
      3.2027e-07,   3.2027e-07,   3.202571e-07, 3.20225e-07,  3.202294e-07,
      3.202057e-07, 3.203104e-07, 3.201318e-07, 3.201301e-07, 3.196595e-07,
      3.165144e-07, 3.098487e-07, 2.991339e-07, 2.938594e-07, 2.861367e-07,
      2.801037e-07, 2.726171e-07, 2.613009e-07, 2.422663e-07, 2.175714e-07,
      1.84452e-07,  1.607857e-07, 1.324031e-07, 1.146837e-07, 1.035763e-07,
      9.629383e-08, 8.964825e-08, 8.012055e-08, 6.702727e-08, 4.960454e-08,
      3.697023e-08, 2.520019e-08, 1.73708e-08,  1.158896e-08, 7.668987e-09,
      5.325452e-09, 3.217389e-09, 2.031667e-09, 1.397726e-09, 1.020753e-09,
      7.779958e-10, 6.262569e-10, 5.17017e-10,  4.355541e-10, 3.729784e-10,
      3.26584e-10};
  constexpr std::array<double, N> CO = {
      1.501303e-07, 1.501303e-07, 1.451401e-07, 1.399818e-07, 1.349763e-07,
      1.313018e-07, 1.303883e-07, 1.288525e-07, 1.247335e-07, 1.185596e-07,
      1.094874e-07, 9.969499e-08, 8.970118e-08, 7.818628e-08, 6.378569e-08,
      5.027852e-08, 3.942639e-08, 3.072076e-08, 2.490691e-08, 1.967801e-08,
      1.550158e-08, 1.331658e-08, 1.232739e-08, 1.232954e-08, 1.307385e-08,
      1.400725e-08, 1.522562e-08, 1.723485e-08, 1.99664e-08,  2.267332e-08,
      2.488221e-08, 2.717432e-08, 2.96382e-08,  3.140848e-08, 3.309394e-08,
      3.49041e-08,  3.647282e-08, 3.925435e-08, 4.676052e-08, 6.408322e-08,
      1.178005e-07, 2.937695e-07, 6.820779e-07, 1.466433e-06, 2.850472e-06,
      5.213432e-06};
  constexpr std::array<double, N> NH3 = {
      5.004344e-10, 5.004344e-10, 5.006512e-10, 4.633001e-10, 3.802249e-10,
      2.881911e-10, 2.041729e-10, 1.460328e-10, 9.881271e-11, 6.482548e-11,
      3.772836e-11, 2.031359e-11, 1.090844e-11, 6.30454e-12,  3.122702e-12,
      1.110877e-12, 4.471837e-13, 2.111549e-13, 1.100669e-13, 6.705563e-14,
      3.973444e-14, 2.411022e-14, 1.921306e-14, 1.720955e-14, 1.591279e-14,
      1.440087e-14, 1.23084e-14,  9.376619e-15, 6.355613e-15, 3.683084e-15,
      1.820992e-15, 9.264994e-16, 2.942467e-16, 8.726088e-17, 2.981207e-17,
      1.301024e-17, 7.132853e-18, 4.803369e-18, 3.662015e-18, 3.002634e-18,
      2.572195e-18, 2.271637e-18, 2.041226e-18, 1.851614e-18, 1.711394e-18,
      1.604133e-18};
  constexpr std::array<double, N> OH = {
      4.40286e-14,  4.40286e-14,  4.403868e-14, 4.402726e-14, 4.402747e-14,
      4.402753e-14, 4.403769e-14, 4.401719e-14, 4.412314e-14, 4.452203e-14,
      4.562834e-14, 4.683572e-14, 4.803563e-14, 4.943182e-14, 5.193407e-14,
      5.65463e-14,  6.753573e-14, 8.255702e-14, 1.040792e-13, 1.3013e-13,
      1.641497e-13, 2.161273e-13, 3.402264e-13, 5.092851e-13, 7.594777e-13,
      1.16071e-12,  2.181179e-12, 5.003399e-12, 1.170899e-11, 3.402063e-11,
      8.35465e-11,  1.701199e-10, 2.851716e-10, 4.062405e-10, 5.113364e-10,
      5.793785e-10, 6.756597e-10, 9.537428e-10, 1.761839e-09, 3.741964e-09,
      7.195675e-09, 1.120927e-08, 1.130787e-08, 6.105899e-09, 1.511361e-09,
      2.441538e-10};
  constexpr std::array<double, N> CO2 = {
      0.0003302947, 0.0003302947, 0.000330279,  0.0003301922, 0.0003302196,
      0.0003302365, 0.0003302993, 0.0003301289, 0.0003302012, 0.0003301613,
      0.0003302132, 0.000330197,  0.0003302043, 0.0003302798, 0.0003302474,
      0.0003303238, 0.0003301187, 0.0003302817, 0.0003301066, 0.0003302647,
      0.0003302907, 0.0003301676, 0.0003302021, 0.0003301881, 0.0003302006,
      0.000330164,  0.0003302063, 0.0003303071, 0.0003302474, 0.0003302002,
      0.0003301878, 0.0003301449, 0.0003302267, 0.0003302498, 0.0003303042,
      0.0003301898, 0.0003302247, 0.0003302361, 0.0003301817, 0.0003303136,
      0.0003302999, 0.0003303214, 0.0003283188, 0.0003202544, 0.0003101903,
      0.0002724246};
  constexpr std::array<double, N> C2H6 = {
      2.001737e-09, 2.001737e-09, 2.001718e-09, 2.001284e-09, 2.001298e-09,
      1.981539e-09, 1.951829e-09, 1.900944e-09, 1.850778e-09, 1.79083e-09,
      1.721105e-09, 1.581616e-09, 1.301317e-09, 9.867273e-10, 7.225826e-10,
      4.963616e-10, 3.351587e-10, 2.141599e-10, 1.490966e-10, 1.050993e-10,
      7.96507e-11,  6.012296e-11, 4.572948e-11, 3.402002e-11, 2.601679e-11,
      1.890355e-11, 1.220742e-11, 5.744399e-12, 2.141597e-12, 8.494512e-13,
      3.421824e-13, 1.34077e-13,  5.39381e-14,  2.251017e-14, 1.04067e-14,
      6.574341e-15, 4.743227e-15, 3.79259e-15,  3.282241e-15, 2.98117e-15,
      2.792425e-15, 2.662427e-15, 2.562049e-15, 2.492225e-15, 2.432347e-15,
      2.391111e-15};
  constexpr std::array<double, N> HNO3 = {
      5.004344e-11, 5.004344e-11, 5.964356e-11, 6.932808e-11, 7.916148e-11,
      8.877584e-11, 9.755817e-11, 1.110797e-10, 1.260543e-10, 1.391026e-10,
      1.531588e-10, 1.741165e-10, 2.021527e-10, 2.41138e-10,  2.761494e-10,
      3.332436e-10, 4.522236e-10, 7.375666e-10, 1.311022e-09, 2.111939e-09,
      3.172608e-09, 4.201995e-09, 4.942889e-09, 5.462527e-09, 5.74333e-09,
      5.841954e-09, 5.614516e-09, 4.823112e-09, 3.742478e-09, 2.591642e-09,
      1.640814e-09, 9.683751e-10, 5.334021e-10, 2.521441e-10, 1.210692e-10,
      7.705411e-11, 5.55578e-11,  4.453206e-11, 3.84342e-11,  3.491546e-11,
      3.272886e-11, 3.122711e-11, 3.012761e-11, 2.92269e-11,  2.842137e-11,
      2.80485e-11};
  constexpr std::array<double, N> O2 = {
      0.209196,  0.209196,  0.2091737, 0.2091135, 0.2091427, 0.2091458,
      0.2091674, 0.2091261, 0.2090999, 0.2091144, 0.20919,   0.2091479,
      0.2091728, 0.2091233, 0.2092344, 0.2090558, 0.2091363, 0.2091695,
      0.2091302, 0.2091664, 0.2091697, 0.2091079, 0.209136,  0.2091331,
      0.2091161, 0.2091007, 0.2091419, 0.2090677, 0.2091486, 0.2091339,
      0.2090999, 0.2090793, 0.2091543, 0.2090877, 0.2091292, 0.2091889,
      0.2091423, 0.2091592, 0.2092021, 0.2091589, 0.2091735, 0.2092036,
      0.2091305, 0.2001717, 0.1901704, 0.1816164};
  constexpr std::array<double, N> HOCl = {
      7.70701e-12,  7.70701e-12,  1.060724e-11, 1.220606e-11, 1.140729e-11,
      9.80859e-12,  8.01775e-12,  6.42263e-12,  5.422729e-12, 4.701851e-12,
      4.413486e-12, 4.343663e-12, 4.654061e-12, 5.013673e-12, 5.223369e-12,
      5.60402e-12,  6.863536e-12, 8.776211e-12, 1.200673e-11, 1.631232e-11,
      2.26182e-11,  3.071765e-11, 4.292509e-11, 5.762889e-11, 7.654501e-11,
      9.927001e-11, 1.310503e-10, 1.84092e-10,  2.4518e-10,   2.961725e-10,
      3.212049e-10, 3.041969e-10, 2.482306e-10, 1.640674e-10, 9.746092e-11,
      4.924865e-11, 2.531723e-11, 1.501008e-11, 1.050709e-11, 8.34489e-12,
      7.114774e-12, 6.335673e-12, 5.785142e-12, 5.373191e-12, 5.053615e-12,
      4.824311e-12};

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::t_field(ws).value()(j, k, m) = t[j];

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::z_field(ws).value()(j, k, m) = z[j];

  for (std::size_t i = 0; i < nspe; i++) {
    if (Var::abs_species(ws).value()[i].nelem()) {
      if (Species::isHCl(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCl[j];
      } else if (Species::isH2CO(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2CO[j];
      } else if (Species::isCH4(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH4[j];
      } else if (Species::isH2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O[j];
      } else if (Species::isCOF2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = COF2[j];
      } else if (Species::isPH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = PH3[j];
      } else if (Species::isSO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SO2[j];
      } else if (Species::isNO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO2[j];
      } else if (Species::isN2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2[j];
      } else if (Species::isCH3Cl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH3Cl[j];
      } else if (Species::isHBr(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HBr[j];
      } else if (Species::isSF6(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SF6[j];
      } else if (Species::isClO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = ClO[j];
      } else if (Species::isC2H2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H2[j];
      } else if (Species::isHI(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HI[j];
      } else if (Species::isO3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O3[j];
      } else if (Species::isH2O2(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O2[j];
      } else if (Species::isHCN(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCN[j];
      } else if (Species::isNO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO[j];
      } else if (Species::isHF(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HF[j];
      } else if (Species::isN2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2O[j];
      } else if (Species::isCO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO[j];
      } else if (Species::isNH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NH3[j];
      } else if (Species::isOH(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = OH[j];
      } else if (Species::isCO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO2[j];
      } else if (Species::isC2H6(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = C2H6[j];
      } else if (Species::isHNO3(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HNO3[j];
      } else if (Species::isO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O2[j];
      } else if (Species::isHOCl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HOCl[j];
      }
    }
  }
  return ws;
}

Workspace& fascod_subarctic_summer(Workspace& ws) {
  constexpr std::size_t N = 46;
  const std::size_t nlat =
      Var::lat_grid(ws).value().nelem() ? Var::lat_grid(ws).value().nelem() : 1;
  const std::size_t nlon =
      Var::lon_grid(ws).value().nelem() ? Var::lon_grid(ws).value().nelem() : 1;
  const std::size_t nspe = Var::abs_species(ws).value().nelem();

  Var::p_grid(ws) = {
      110000.0, 101000.0, 89600.0, 79290.0, 70000.0, 61600.0, 54100.0, 47400.0,
      41300.0,  35900.0,  31080.0, 26770.0, 23000.0, 19770.0, 17000.0, 14600.0,
      12600.0,  10800.0,  9280.0,  7980.0,  6860.0,  5900.0,  5070.0,  4360.0,
      3750.0,   3228.0,   2780.0,  1923.0,  1340.0,  940.0,   661.0,   472.0,
      340.0,    248.0,    182.0,   134.0,   98.7,    53.7,    28.8,    14.7,
      7.1,      3.2,      1.25,    0.451,   0.161,   0.061};

  Var::t_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::z_field(ws) = Tensor3(N, nlat, nlon, 0.0);
  Var::vmr_field(ws) = Tensor4(nspe, N, nlat, nlon, 0.0);

  constexpr std::array<double, N> CO = {
      1.501344e-07, 1.501344e-07, 1.450723e-07, 1.400086e-07, 1.350254e-07,
      1.313365e-07, 1.304383e-07, 1.288708e-07, 1.247269e-07, 1.185821e-07,
      1.09445e-07,  9.969157e-08, 8.96976e-08,  7.819737e-08, 6.377798e-08,
      5.02818e-08,  3.943428e-08, 3.071909e-08, 2.491155e-08, 1.967298e-08,
      1.550136e-08, 1.332272e-08, 1.233309e-08, 1.232324e-08, 1.308409e-08,
      1.401503e-08, 1.511248e-08, 1.65027e-08,  1.809296e-08, 1.998431e-08,
      2.184688e-08, 2.345246e-08, 2.498047e-08, 2.649702e-08, 2.810365e-08,
      2.999569e-08, 3.222765e-08, 3.654196e-08, 4.591806e-08, 6.380429e-08,
      1.176863e-07, 3.035566e-07, 7.901203e-07, 1.824686e-06, 3.405022e-06,
      5.882597e-06};
  constexpr std::array<double, N> OH = {
      4.405095e-14, 4.405095e-14, 4.401656e-14, 4.403295e-14, 4.403421e-14,
      4.404266e-14, 4.404365e-14, 4.402103e-14, 4.412337e-14, 4.454417e-14,
      4.563475e-14, 4.683169e-14, 4.803249e-14, 4.943169e-14, 5.192592e-14,
      5.654307e-14, 6.75417e-14,  8.257016e-14, 1.04069e-13,  1.300622e-13,
      1.64124e-13,  2.161779e-13, 3.403098e-13, 5.092608e-13, 7.595902e-13,
      1.161134e-12, 2.181906e-12, 5.003885e-12, 1.170749e-11, 3.402867e-11,
      8.354584e-11, 1.701774e-10, 2.852477e-10, 4.063077e-10, 5.114283e-10,
      5.794233e-10, 6.754972e-10, 9.538811e-10, 1.760654e-09, 3.741804e-09,
      7.194279e-09, 1.121004e-08, 1.130816e-08, 6.103738e-09, 1.510572e-09,
      2.405462e-10};
  constexpr std::array<double, N> O2 = {
      0.2091438, 0.2091438, 0.2091004, 0.2091469, 0.2091905, 0.2091744,
      0.2092322, 0.2090833, 0.2090574, 0.2091975, 0.2091936, 0.2091862,
      0.2091367, 0.2091764, 0.2090571, 0.2091561, 0.2091399, 0.2091605,
      0.2091766, 0.2091204, 0.2091777, 0.2091687, 0.2091903, 0.2090957,
      0.2091962, 0.2092562, 0.2091277, 0.2091448, 0.2091506, 0.2091849,
      0.2091228, 0.2092028, 0.2091462, 0.2091555, 0.2092207, 0.209116,
      0.2091637, 0.2092339, 0.2091879, 0.2091538, 0.2091732, 0.209165,
      0.2091661, 0.2001907, 0.190138,  0.178919};
  constexpr std::array<double, N> CH4 = {
      1.701183e-06, 1.701183e-06, 1.700758e-06, 1.701273e-06, 1.70131e-06,
      1.698389e-06, 1.688727e-06, 1.672814e-06, 1.649587e-06, 1.630158e-06,
      1.616403e-06, 1.57964e-06,  1.542501e-06, 1.507171e-06, 1.471996e-06,
      1.43498e-06,  1.389824e-06, 1.343061e-06, 1.290978e-06, 1.230876e-06,
      1.158069e-06, 1.072985e-06, 9.910626e-07, 9.178248e-07, 8.581768e-07,
      8.022296e-07, 7.482602e-07, 6.96099e-07,  6.446026e-07, 5.89412e-07,
      5.246142e-07, 4.51026e-07,  3.710349e-07, 2.994794e-07, 2.447134e-07,
      2.00123e-07,  1.661211e-07, 1.501975e-07, 1.501216e-07, 1.501224e-07,
      1.501195e-07, 1.501076e-07, 1.501285e-07, 1.50143e-07,  1.40109e-07,
      1.29217e-07};
  constexpr std::array<double, N> H2O = {
      0.01195108,   0.01195108,   0.008707813,  0.006755055,  0.004823939,
      0.00338309,   0.002220437,  0.001330731,  0.0007974787, 0.0003999959,
      0.0001300755, 4.242961e-05, 1.330931e-05, 6.004778e-06, 4.453667e-06,
      4.003803e-06, 4.002654e-06, 4.001831e-06, 4.054199e-06, 4.301638e-06,
      4.503552e-06, 4.603399e-06, 4.703868e-06, 4.802356e-06, 4.833982e-06,
      4.85583e-06,  4.904191e-06, 4.954128e-06, 5.002271e-06, 5.005772e-06,
      5.003456e-06, 5.00478e-06,  5.003544e-06, 5.003827e-06, 5.0022e-06,
      5.003076e-06, 4.955714e-06, 4.855354e-06, 4.503648e-06, 4.002965e-06,
      3.302713e-06, 2.702272e-06, 2.001211e-06, 1.33114e-06,  8.506319e-07,
      5.366369e-07};
  constexpr std::array<double, N> t = {
      287.2, 287.2, 281.7, 276.3, 270.9, 265.5, 260.1, 253.1, 246.1, 239.2,
      232.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2, 225.2,
      225.2, 225.2, 225.2, 225.2, 225.2, 226.6, 228.1, 231.0, 235.1, 240.0,
      247.2, 254.6, 262.1, 269.5, 273.6, 276.2, 277.2, 274.0, 262.7, 239.7,
      216.6, 193.6, 170.6, 161.7, 161.6, 176.8};
  constexpr std::array<double, N> HCl = {
      1.000765e-09, 1.000765e-09, 7.492365e-10, 5.614779e-10, 4.223351e-10,
      3.193257e-10, 2.392364e-10, 1.790773e-10, 1.320492e-10, 9.9723e-11,
      7.484759e-11, 5.684382e-11, 4.593707e-11, 4.362822e-11, 6.514974e-11,
      1.010747e-10, 1.631168e-10, 2.371733e-10, 3.132455e-10, 3.852382e-10,
      4.423326e-10, 4.893779e-10, 5.224544e-10, 5.492686e-10, 5.754345e-10,
      6.04701e-10,  6.515131e-10, 7.516608e-10, 9.885844e-10, 1.281055e-09,
      1.571261e-09, 1.691348e-09, 1.741288e-09, 1.761467e-09, 1.791244e-09,
      1.801164e-09, 1.801584e-09, 1.802089e-09, 1.800955e-09, 1.801334e-09,
      1.801518e-09, 1.800957e-09, 1.801467e-09, 1.801915e-09, 1.801599e-09,
      1.78919e-09};
  constexpr std::array<double, N> NO = {
      3.002296e-10, 3.002296e-10, 3.001721e-10, 3.002247e-10, 3.002405e-10,
      3.002827e-10, 3.003067e-10, 3.001333e-10, 3.001344e-10, 3.002729e-10,
      3.001743e-10, 3.002478e-10, 3.002537e-10, 3.002389e-10, 2.992279e-10,
      2.95174e-10,  2.832951e-10, 2.682091e-10, 2.52198e-10,  2.401358e-10,
      2.442144e-10, 2.551764e-10, 2.772645e-10, 3.071539e-10, 3.602684e-10,
      4.515631e-10, 6.854992e-10, 1.281074e-09, 2.451476e-09, 4.533396e-09,
      7.146319e-09, 9.346725e-09, 1.120768e-08, 1.190866e-08, 1.170847e-08,
      1.10079e-08,  1.030695e-08, 1.010945e-08, 1.010676e-08, 1.030685e-08,
      1.150748e-08, 1.611339e-08, 2.681472e-08, 7.014596e-08, 2.13143e-07,
      7.079125e-07};
  constexpr std::array<double, N> HCN = {
      1.701183e-10, 1.701183e-10, 1.650838e-10, 1.631028e-10, 1.611542e-10,
      1.601389e-10, 1.601768e-10, 1.600564e-10, 1.601046e-10, 1.60164e-10,
      1.60093e-10,  1.601709e-10, 1.600632e-10, 1.601064e-10, 1.591066e-10,
      1.571067e-10, 1.550967e-10, 1.521272e-10, 1.491342e-10, 1.451024e-10,
      1.410986e-10, 1.37127e-10,  1.341246e-10, 1.300787e-10, 1.251197e-10,
      1.191181e-10, 1.13083e-10,  1.050866e-10, 9.735655e-11, 9.045641e-11,
      8.468182e-11, 8.028501e-11, 7.635699e-11, 7.305437e-11, 7.005156e-11,
      6.704918e-11, 6.437e-11,    6.216431e-11, 6.023755e-11, 5.885124e-11,
      5.753739e-11, 5.624233e-11, 5.504272e-11, 5.376042e-11, 5.25374e-11,
      5.090247e-11};
  constexpr std::array<double, N> SO2 = {
      3.002296e-10, 3.002296e-10, 2.741702e-10, 2.361864e-10, 1.901684e-10,
      1.461543e-10, 1.180914e-10, 9.716918e-11, 8.301414e-11, 7.216118e-11,
      6.564637e-11, 6.0851e-11,   5.794181e-11, 5.603726e-11, 5.593147e-11,
      5.643659e-11, 5.75474e-11,  5.755151e-11, 5.374327e-11, 4.784793e-11,
      3.973242e-11, 3.192603e-11, 2.672067e-11, 2.281369e-11, 2.071233e-11,
      1.902593e-11, 1.751416e-11, 1.541137e-11, 1.341045e-11, 1.210903e-11,
      1.160761e-11, 1.210978e-11, 1.361313e-11, 1.651938e-11, 2.100509e-11,
      2.771613e-11, 3.562841e-11, 4.594692e-11, 5.153503e-11, 5.112898e-11,
      4.321622e-11, 2.831747e-11, 1.331126e-11, 5.564154e-12, 2.242298e-12,
      8.907932e-13};
  constexpr std::array<double, N> CO2 = {
      0.0003552736, 0.0003552736, 0.0003552145, 0.0003552659, 0.0003552766,
      0.0003553286, 0.0003553364, 0.000355132,  0.0003551754, 0.0003552862,
      0.0003552579, 0.0003553029, 0.0003552755, 0.0003552853, 0.000355196,
      0.000355231,  0.0003553527, 0.0003552705, 0.0003551613, 0.0003551969,
      0.0003552621, 0.0003552549, 0.0003553352, 0.0003552203, 0.0003552935,
      0.0003554157, 0.0003552678, 0.0003552642, 0.0003553671, 0.0003553393,
      0.0003552506, 0.0003553245, 0.0003552825, 0.0003552942, 0.0003551355,
      0.0003551671, 0.0003553146, 0.0003554158, 0.0003552794, 0.0003552688,
      0.0003552913, 0.0003552631, 0.0003531327, 0.0003445914, 0.0003337116,
      0.0002887275};
  constexpr std::array<double, N> NO2 = {
      2.301878e-11, 2.301878e-11, 2.301103e-11, 2.301722e-11, 2.301898e-11,
      2.302406e-11, 2.302086e-11, 2.300948e-11, 2.301195e-11, 2.301725e-11,
      2.321967e-11, 2.382237e-11, 2.621306e-11, 3.151801e-11, 4.453667e-11,
      7.485834e-11, 1.711122e-10, 3.192828e-10, 5.193396e-10, 7.714895e-10,
      1.060619e-09, 1.391296e-09, 1.761344e-09, 2.160846e-09, 2.581993e-09,
      3.063728e-09, 3.743e-09,    4.81315e-09,  6.165026e-09, 7.216067e-09,
      7.285735e-09, 6.265657e-09, 4.03285e-09,  2.171076e-09, 1.150714e-09,
      6.665076e-10, 4.432223e-10, 3.393534e-10, 2.852562e-10, 2.53281e-10,
      2.312026e-10, 2.151793e-10, 2.021939e-10, 1.921712e-10, 1.830702e-10,
      1.749572e-10};
  constexpr std::array<double, N> NH3 = {
      5.005789e-10, 5.005789e-10, 5.005039e-10, 4.633275e-10, 3.802833e-10,
      2.882619e-10, 2.041873e-10, 1.460487e-10, 9.881068e-11, 6.485675e-11,
      3.772294e-11, 2.031464e-11, 1.090701e-11, 6.305174e-12, 3.12214e-12,
      1.110842e-12, 4.47399e-13,  2.11147e-13,  1.101e-13,    6.705724e-14,
      3.973242e-14, 2.412107e-14, 1.92141e-14,  1.720832e-14, 1.591151e-14,
      1.44221e-14,  1.231429e-14, 9.377516e-15, 6.353974e-15, 3.683825e-15,
      1.821175e-15, 9.272249e-16, 2.941883e-16, 8.726314e-17, 2.98264e-17,
      1.300857e-17, 7.134988e-18, 4.805335e-18, 3.662362e-18, 3.001098e-18,
      2.571913e-18, 2.271245e-18, 2.040783e-18, 1.851913e-18, 1.711519e-18,
      1.580698e-18};
  constexpr std::array<double, N> HBr = {
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         0.0,          0.0,          0.0,          0.0,
      0.0,         7.146621e-12, 7.157631e-12, 7.154704e-12, 7.154906e-12,
      7.15637e-12, 7.155381e-12, 7.154988e-12, 7.158155e-12, 7.15512e-12,
      7.107137e-12};
  constexpr std::array<double, N> H2CO = {
      2.401994e-09, 2.401994e-09, 1.070462e-09, 4.042929e-10, 2.271975e-10,
      1.401439e-10, 1.001022e-10, 7.446197e-11, 6.043001e-11, 5.014669e-11,
      4.223071e-11, 3.633173e-11, 3.432437e-11, 3.392432e-11, 3.502576e-11,
      3.62259e-11,  3.622624e-11, 3.581495e-11, 3.501354e-11, 3.422218e-11,
      3.392621e-11, 3.432918e-11, 3.683368e-11, 4.032153e-11, 4.503977e-11,
      5.066152e-11, 5.824081e-11, 7.216408e-11, 8.735201e-11, 1.010672e-10,
      1.110674e-10, 1.131289e-10, 1.030724e-10, 7.956609e-11, 4.823698e-11,
      1.63098e-11,  5.103067e-12, 2.002164e-12, 1.050725e-12, 6.864477e-13,
      5.142983e-13, 4.163252e-13, 3.533211e-13, 3.092957e-13, 2.76199e-13,
      2.485097e-13};
  constexpr std::array<double, N> HI = {
      3.002296e-12, 3.002296e-12, 3.001721e-12, 3.002247e-12, 3.002405e-12,
      3.002827e-12, 3.003067e-12, 3.001333e-12, 3.001344e-12, 3.002729e-12,
      3.001743e-12, 3.002478e-12, 3.002537e-12, 3.002389e-12, 3.001424e-12,
      3.002852e-12, 3.003224e-12, 3.002813e-12, 3.002453e-12, 3.001795e-12,
      3.002368e-12, 3.002354e-12, 3.002625e-12, 3.001651e-12, 3.002375e-12,
      3.003636e-12, 3.002104e-12, 3.001999e-12, 3.001363e-12, 3.002406e-12,
      3.002074e-12, 3.002868e-12, 3.002552e-12, 3.002296e-12, 3.00132e-12,
      3.002415e-12, 3.002511e-12, 3.003246e-12, 3.002432e-12, 3.003349e-12,
      3.00239e-12,  3.002153e-12, 3.001816e-12, 3.002861e-12, 3.001741e-12,
      2.982116e-12};
  constexpr std::array<double, N> HOCl = {
      7.706953e-12, 7.706953e-12, 1.060478e-11, 1.221106e-11, 1.140796e-11,
      9.807094e-12, 8.018799e-12, 6.422898e-12, 5.422658e-12, 4.704644e-12,
      4.412872e-12, 4.34285e-12,  4.65319e-12,  5.013943e-12, 5.223685e-12,
      5.603195e-12, 6.865217e-12, 8.775238e-12, 1.200847e-11, 1.631038e-11,
      2.261748e-11, 3.072446e-11, 4.293583e-11, 5.76297e-11,  7.65643e-11,
      9.934581e-11, 1.31073e-10,  1.841005e-10, 2.451476e-10, 2.962218e-10,
      3.212229e-10, 3.043085e-10, 2.482081e-10, 1.641435e-10, 9.747026e-11,
      4.923391e-11, 2.532145e-11, 1.501975e-11, 1.050725e-11, 8.345889e-12,
      7.114249e-12, 6.334258e-12, 5.785045e-12, 5.376042e-12, 5.054178e-12,
      4.750097e-12};
  constexpr std::array<double, N> CH3Cl = {
      7.004179e-10, 7.004179e-10, 6.702325e-10, 6.432698e-10, 6.224955e-10,
      6.075876e-10, 6.026048e-10, 6.002667e-10, 6.002687e-10, 5.98522e-10,
      5.943658e-10, 5.88416e-10,  5.794181e-10, 5.66349e-10,  5.483406e-10,
      5.283742e-10, 5.034164e-10, 4.773407e-10, 4.493125e-10, 4.212021e-10,
      3.953299e-10, 3.692732e-10, 3.433149e-10, 3.172094e-10, 2.862248e-10,
      2.483161e-10, 1.911151e-10, 1.100788e-10, 4.723694e-11, 1.791502e-11,
      7.35286e-12,  3.032658e-12, 1.320867e-12, 8.696306e-13, 6.683438e-13,
      5.603559e-13, 4.944081e-13, 4.565103e-13, 4.323552e-13, 4.17407e-13,
      4.053311e-13, 3.962775e-13, 3.893128e-13, 3.833524e-13, 3.783358e-13,
      3.707637e-13};
  constexpr std::array<double, N> O3 = {
      2.413772e-08, 2.413772e-08, 2.941817e-08, 3.381377e-08, 3.889929e-08,
      4.482223e-08, 5.333696e-08, 6.566661e-08, 7.74113e-08,  9.122263e-08,
      1.421444e-07, 1.890922e-07, 3.052557e-07, 4.103317e-07, 5.002374e-07,
      6.003575e-07, 7.00341e-07,  8.50749e-07,  1.000818e-06, 1.300622e-06,
      1.701523e-06, 2.101701e-06, 2.702118e-06, 3.301887e-06, 3.703012e-06,
      4.205478e-06, 4.503156e-06, 5.304085e-06, 5.704769e-06, 6.90585e-06,
      7.70398e-06,  7.805074e-06, 7.004535e-06, 5.404433e-06, 4.203094e-06,
      3.201627e-06, 2.502287e-06, 1.702051e-06, 1.200847e-06, 8.00593e-07,
      4.003187e-07, 2.001435e-07, 1.801467e-07, 6.504713e-07, 9.00661e-07,
      7.95151e-07};
  constexpr std::array<double, N> HNO3 = {
      5.001863e-11, 5.001863e-11, 5.964374e-11, 6.933073e-11, 7.918784e-11,
      8.878753e-11, 9.757976e-11, 1.110294e-10, 1.260433e-10, 1.39097e-10,
      1.530786e-10, 1.741089e-10, 2.021069e-10, 2.411033e-10, 2.761822e-10,
      3.332953e-10, 4.523344e-10, 7.376037e-10, 1.311081e-09, 2.111076e-09,
      3.172339e-09, 4.203401e-09, 4.944274e-09, 5.462733e-09, 5.744395e-09,
      5.847349e-09, 5.6145e-09,   4.823102e-09, 3.742619e-09, 2.592073e-09,
      1.640968e-09, 9.689314e-10, 5.333494e-10, 2.522169e-10, 1.210699e-10,
      7.703826e-11, 5.552882e-11, 4.454498e-11, 3.842458e-11, 3.4919e-11,
      3.272807e-11, 3.122439e-11, 3.013123e-11, 2.922666e-11, 2.842369e-11,
      2.76362e-11};
  constexpr std::array<double, N> HF = {
      1.000765e-14, 1.000765e-14, 1.000574e-14, 1.230729e-14, 1.971681e-14,
      3.18314e-14,  5.635729e-14, 9.1861e-14,   1.53029e-13,  2.412119e-13,
      4.042554e-13, 6.575253e-13, 1.200745e-12, 1.961225e-12, 3.12214e-12,
      4.623541e-12, 7.094716e-12, 1.050841e-11, 1.691372e-11, 2.571632e-11,
      4.023101e-11, 5.775988e-11, 7.776407e-11, 9.905661e-11, 1.231297e-10,
      1.502303e-10, 1.821654e-10, 2.302086e-10, 2.831794e-10, 3.202636e-10,
      3.482282e-10, 3.723795e-10, 3.953023e-10, 4.103588e-10, 4.213472e-10,
      4.243223e-10, 4.253849e-10, 4.254423e-10, 4.253025e-10, 4.252869e-10,
      4.254228e-10, 4.253467e-10, 4.253044e-10, 4.2543e-10,   4.25316e-10,
      4.225865e-10};
  constexpr std::array<double, N> z = {
      -717.22, 0.0,     1000.0,  2000.0,  3000.0,  4000.0,  5000.0,  6000.0,
      7000.0,  8000.0,  9000.0,  10000.0, 11000.0, 12000.0, 13000.0, 14000.0,
      15000.0, 16000.0, 17000.0, 18000.0, 19000.0, 20000.0, 21000.0, 22000.0,
      23000.0, 24000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0,
      40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 55000.0, 60000.0, 65000.0,
      70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 95000.0};
  constexpr std::array<double, N> ClO = {
      1.000765e-14, 1.000765e-14, 1.000574e-14, 1.000749e-14, 1.000802e-14,
      1.000942e-14, 1.001022e-14, 1.000444e-14, 1.000448e-14, 1.011029e-14,
      1.051126e-14, 1.211445e-14, 1.871009e-14, 3.181683e-14, 5.613267e-14,
      9.996729e-14, 1.781206e-13, 3.161159e-13, 5.655776e-13, 1.040732e-12,
      2.041465e-12, 4.643451e-12, 8.156642e-12, 1.070439e-11, 1.521502e-11,
      2.242792e-11, 3.972973e-11, 8.486868e-11, 1.851204e-10, 3.574544e-10,
      5.083491e-10, 6.075743e-10, 5.954015e-10, 4.333149e-10, 2.511478e-10,
      1.560971e-10, 1.040778e-10, 7.700089e-11, 6.304603e-11, 5.524902e-11,
      5.046105e-11, 4.723754e-11, 4.494245e-11, 4.304299e-11, 4.16308e-11,
      4.005768e-11};
  constexpr std::array<double, N> N2O = {
      3.102412e-07, 3.102412e-07, 3.101561e-07, 3.102322e-07, 3.102325e-07,
      3.081975e-07, 3.026964e-07, 2.906966e-07, 2.823632e-07, 2.761702e-07,
      2.704663e-07, 2.652867e-07, 2.602379e-07, 2.551008e-07, 2.494785e-07,
      2.434227e-07, 2.35668e-07,  2.283635e-07, 2.180891e-07, 2.036265e-07,
      1.818463e-07, 1.56837e-07,  1.351059e-07, 1.218774e-07, 1.102778e-07,
      9.905505e-08, 8.782003e-08, 7.332508e-08, 5.944587e-08, 4.156201e-08,
      3.034088e-08, 1.950524e-08, 1.2751e-08,   9.008388e-09, 6.289073e-09,
      4.561963e-09, 2.79738e-09,  1.766864e-09, 1.214826e-09, 8.872714e-10,
      6.760432e-10, 5.542371e-10, 4.652533e-10, 3.983023e-10, 3.461842e-10,
      3.028937e-10};
  constexpr std::array<double, N> N2 = {
      0.7816884, 0.7816884, 0.7813591, 0.7813539, 0.7817261, 0.7819491,
      0.7819657, 0.781482,  0.7813531, 0.7816848, 0.7814848, 0.7815735,
      0.7815249, 0.7816592, 0.7815408, 0.7815935, 0.7815292, 0.7816526,
      0.7816899, 0.7816202, 0.7814134, 0.7815501, 0.7819337, 0.781613,
      0.7816457, 0.7819727, 0.7815665, 0.7816808, 0.7814686, 0.781535,
      0.7817578, 0.7819969, 0.7815575, 0.7815572, 0.7814641, 0.7814816,
      0.7817465, 0.7819853, 0.7815894, 0.7816813, 0.7817671, 0.7815287,
      0.7816406, 0.7816547, 0.7805082, 0.7743418};

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::t_field(ws).value()(j, k, m) = t[j];

  for (std::size_t j = 0; j < N; j++)
    for (std::size_t k = 0; k < nlat; k++)
      for (std::size_t m = 0; m < nlon; m++)
        Var::z_field(ws).value()(j, k, m) = z[j];

  for (std::size_t i = 0; i < nspe; i++) {
    if (Var::abs_species(ws).value()[i].nelem()) {
      if (Species::isCO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO[j];
      } else if (Species::isOH(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = OH[j];
      } else if (Species::isO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O2[j];
      } else if (Species::isCH4(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH4[j];
      } else if (Species::isH2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2O[j];
      } else if (Species::isHCl(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCl[j];
      } else if (Species::isNO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO[j];
      } else if (Species::isHCN(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HCN[j];
      } else if (Species::isSO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = SO2[j];
      } else if (Species::isCO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CO2[j];
      } else if (Species::isNO2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NO2[j];
      } else if (Species::isNH3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = NH3[j];
      } else if (Species::isHBr(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HBr[j];
      } else if (Species::isH2CO(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = H2CO[j];
      } else if (Species::isHI(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HI[j];
      } else if (Species::isHOCl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HOCl[j];
      } else if (Species::isCH3Cl(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = CH3Cl[j];
      } else if (Species::isO3(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = O3[j];
      } else if (Species::isHNO3(
                     Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HNO3[j];
      } else if (Species::isHF(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = HF[j];
      } else if (Species::isClO(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = ClO[j];
      } else if (Species::isN2O(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2O[j];
      } else if (Species::isN2(Var::abs_species(ws).value()[i][0].Species())) {
        for (std::size_t j = 0; j < N; j++)
          for (std::size_t k = 0; k < nlat; k++)
            for (std::size_t m = 0; m < nlon; m++)
              Var::vmr_field(ws).value()(i, j, k, m) = N2[j];
      }
    }
  }
  return ws;
}
}  // namespace ARTS::Atmosphere::Earth
